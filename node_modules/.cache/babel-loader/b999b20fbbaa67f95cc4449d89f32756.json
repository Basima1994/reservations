{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { MultiSelect as KendoMultiSelect } from '@progress/kendo-react-dropdowns';\nimport { isPresent } from '../utils';\nimport { ValidationError } from './ValidationError';\n/** @hidden */\n\nexport var MultiSelect = function (props) {\n  var onChange = props.onChange,\n      value = props.value,\n      validationMessage = props.validationMessage,\n      valid = props.valid,\n      data = props.data,\n      dataItemKey = props.dataItemKey,\n      textField = props.textField,\n      colorField = props.colorField,\n      visited = props.visited,\n      touched = props.touched,\n      modified = props.modified,\n      others = __rest(props, [\"onChange\", \"value\", \"validationMessage\", \"valid\", \"data\", \"dataItemKey\", \"textField\", \"colorField\", \"visited\", \"touched\", \"modified\"]);\n\n  var inputValue = Array.isArray(value) ? value : [value];\n  var onValueChange = React.useCallback(function (e) {\n    var valueField = e.target.props.dataItemKey;\n    var selection = (e.target.value || []).map(function (item) {\n      return item[valueField];\n    });\n    onChange({\n      value: selection\n    });\n  }, [onChange]);\n\n  if (!data) {\n    return null;\n  }\n\n  var inputData = data;\n  var selectedValue = inputData.filter(function (item) {\n    return (inputValue || []).indexOf(item[dataItemKey]) > -1;\n  });\n\n  var itemRenderer = function (element, itemProps) {\n    var children = React.createElement(React.Fragment, null, colorField && React.createElement(\"span\", {\n      key: 1,\n      className: 'k-scheduler-mark',\n      style: {\n        backgroundColor: itemProps.dataItem[colorField],\n        marginRight: isPresent(itemProps.dataItem[dataItemKey]) ? '8px' : '4px'\n      }\n    }, \"\\u00A0\"), React.createElement(\"span\", {\n      key: 2\n    }, \"\\u00A0 \", element.props.children));\n    return React.cloneElement(element, __assign({}, element.props), children);\n  };\n\n  var tagRenderer = function (itemProps, element) {\n    var children = React.createElement(React.Fragment, null, colorField && React.createElement(\"span\", {\n      className: 'k-scheduler-mark',\n      style: {\n        backgroundColor: itemProps.data[0][colorField],\n        marginRight: isPresent(itemProps.data[0][dataItemKey]) ? '8px' : '4px'\n      }\n    }, \"\\u00A0\"), \"\\u00A0\", element.props.children);\n    return React.cloneElement(element, __assign({}, element.props), children);\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      display: 'inline-block',\n      width: '100%'\n    }\n  }, React.createElement(KendoMultiSelect, __assign({\n    style: {\n      width: '100%'\n    },\n    value: selectedValue,\n    valid: valid,\n    data: inputData,\n    textField: textField,\n    dataItemKey: dataItemKey,\n    itemRender: itemRenderer,\n    tagRender: tagRenderer,\n    onChange: onValueChange\n  }, others)), React.createElement(ValidationError, {\n    validationMessage: validationMessage,\n    valid: valid\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}