{"ast":null,"code":"import * as React from 'react';\nimport { getRect, setRect } from '../../common/utils';\nimport { BORDER_WIDTH } from '../../../constants';\nimport { useRtl } from '../../../hooks';\nimport { last, first } from '../../../utils';\n/** @hidden */\n\nexport var useTimeFragmentPosition = function (ref, props, order) {\n  var _a = React.useState(true),\n      fit = _a[0],\n      setFit = _a[1];\n\n  var _b = React.useState(false),\n      show = _b[0],\n      setShow = _b[1];\n\n  var rtl = useRtl();\n\n  var reflow = function () {\n    var element = ref.current;\n\n    if (!element) {\n      return;\n    }\n\n    if (props.slots.length === 0) {\n      setFit(false);\n      return;\n    }\n\n    var slot = !rtl ? first(props.slots) : last(props.slots);\n\n    if (!slot.ref.current) {\n      return;\n    }\n\n    var rect = getRect(slot.ref.current.element);\n    var dimension = props.vertical ? calculateHeight(props.slots) : calculateWidth(props.slots);\n    var siblings = calculateSiblings(props.slots);\n    var ignoreSiblings = props.dragHint || props.resizeHint;\n\n    if (ignoreSiblings) {\n      order = 0;\n    }\n\n    rect.width = props.vertical ? ignoreSiblings ? rect.width : rect.width / siblings - BORDER_WIDTH : dimension - BORDER_WIDTH * 2;\n    rect.height = props.vertical ? dimension - BORDER_WIDTH : ignoreSiblings ? rect.height : 25;\n    rect.left = props.vertical ? rect.left + order * (rect.width + BORDER_WIDTH) : rect.left;\n    rect.top = props.vertical ? rect.top : rect.top + order * (rect.height + BORDER_WIDTH);\n    setRect(element, rect);\n    setFit(true);\n    setShow(true);\n  };\n\n  var handleResize = function () {\n    if (!window) {\n      return;\n    }\n\n    window.addEventListener('resize', reflow);\n    return function () {\n      return window.removeEventListener('resize', reflow);\n    };\n  };\n\n  React.useEffect(handleResize, []);\n  React.useEffect(reflow);\n  return {\n    fit: fit,\n    show: show\n  };\n};\n\nvar calculateSiblings = function (slots) {\n  var siblings = 1;\n  slots.forEach(function (slot) {\n    if (slot.items.length > siblings) {\n      siblings = slot.items.length;\n    }\n  });\n  return siblings;\n};\n\nvar calculateHeight = function (slots) {\n  if (!slots || !slots.length) {\n    return 0;\n  }\n\n  return slots.reduce(function (height, slot) {\n    return height + getRect(slot.ref.current.element).height;\n  }, 0);\n};\n\nvar calculateWidth = function (slots) {\n  if (!slots || !slots.length) {\n    return 0;\n  }\n\n  return slots.reduce(function (width, slot) {\n    return width + getRect(slot.ref.current.element).width;\n  }, 0);\n};","map":null,"metadata":{},"sourceType":"module"}