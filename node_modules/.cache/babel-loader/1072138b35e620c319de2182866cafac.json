{"ast":null,"code":"import { clone, getter } from '@progress/kendo-react-common';\nimport { isInGroup, extractGroups, toUTCDateTime, extractResourceFields, extractResources, getField, isRecurringMaster, setField } from '.';\nimport { parseRule, expand } from '@progress/kendo-recurrence';\nimport { ZonedDate } from '@progress/kendo-date-math';\n/** @hidden */\n\nexport var toSchedulerItems = function (_a) {\n  var data = _a.data,\n      fields = _a.fields,\n      resources = _a.resources,\n      timezone = _a.timezone,\n      group = _a.group,\n      dateRange = _a.dateRange;\n\n  var isServerExpanded = function (item, items) {\n    return items.find(function (i) {\n      return getField(i, fields.recurrenceId) === getField(item, fields.id);\n    });\n  };\n\n  var isRecurring = function (item) {\n    return Boolean(getField(item, fields.recurrenceRule));\n  };\n\n  var isOccurrence = function (item) {\n    return getField(item, fields.recurrenceId) !== null && getField(item, fields.recurrenceId) !== undefined;\n  };\n\n  return data.reduce(expandReducer(fields, isRecurring, isOccurrence, isServerExpanded, {\n    timezone: timezone,\n    dateRange: dateRange,\n    data: data\n  }), []).map(function (eventItem) {\n    return readItem(eventItem, fields, resources, group);\n  }).filter(function (eventItem) {\n    return !isRecurringMaster(eventItem) && isInGroup(eventItem, group, resources);\n  });\n};\n\nvar expandReducer = function (fields, isRecurring, isOccurrence, isServerExpanded, args) {\n  return function (acc, current) {\n    return acc.concat(isRecurring(current) && !isOccurrence(current) && !isServerExpanded(current, args.data) ? occurrences(current, fields, args).concat([current]) : [current]);\n  };\n};\n\nvar readItem = function (dataItem, fields, resources, group) {\n  var result = {\n    id: getter(fields.id || 'id')(dataItem),\n    start: getter(fields.start || 'start')(dataItem),\n    startTimezone: getter(fields.startTimezone || 'startTimezone')(dataItem),\n    end: getter(fields.end || 'end')(dataItem),\n    endTimezone: getter(fields.endTimezone || 'endTimezone')(dataItem),\n    isAllDay: getter(fields.isAllDay || 'isAllDay')(dataItem),\n    title: getter(fields.title || 'title')(dataItem),\n    description: getter(fields.description || 'description')(dataItem),\n    occurrenceId: getter('occurrenceId')(dataItem),\n    recurrenceRule: getter(fields.recurrenceRule || 'recurrenceRule')(dataItem),\n    recurrenceExceptions: getter(fields.recurrenceExceptions || 'recurrenceExceptions')(dataItem),\n    resourceFields: {},\n    resources: [],\n    groups: [],\n    recurrenceId: getter(fields.recurrenceId || 'recurrenceId')(dataItem),\n    _dataItem: clone(dataItem)\n  };\n\n  if (resources) {\n    result.resourceFields = extractResourceFields(dataItem, fields, resources);\n    result.resources = extractResources(dataItem, fields, resources);\n  }\n\n  if (group) {\n    result.groups = extractGroups(dataItem, fields, group, resources);\n  }\n\n  return result;\n};\n\nvar occurrences = function (item, fields, _a) {\n  var dateRange = _a.dateRange,\n      timezone = _a.timezone;\n  var rrule = getField(item, fields.recurrenceRule);\n  var rule = parseRule({\n    recurrenceRule: rrule\n  }); // changed as for display purposes timezone of the scheduler is the correct one\n\n  if (!rule.start) {\n    rule.start = ZonedDate.fromLocalDate(getField(item, fields.start), timezone);\n  }\n\n  if (!rule.end) {\n    rule.end = ZonedDate.fromLocalDate(getField(item, fields.end), timezone);\n  }\n\n  var exceptionRule = getField(item, fields.recurrenceExceptions);\n\n  if (exceptionRule) {\n    rule.exceptionDates = exceptionRule.map(function (exDate) {\n      return ZonedDate.fromLocalDate(exDate, timezone);\n    });\n  }\n\n  var utcRangeStart = toUTCDateTime(dateRange.start);\n  var utcRangeEnd = toUTCDateTime(dateRange.end);\n  var series = expand(rule, {\n    rangeStart: ZonedDate.fromUTCDate(utcRangeStart, timezone),\n    rangeEnd: ZonedDate.fromUTCDate(utcRangeEnd, timezone)\n  });\n\n  if (!series.events.length) {\n    return [];\n  }\n\n  var expanded = series.events.map(function (occurrence, idx) {\n    var occurrenceItem = clone(item);\n    setField(occurrenceItem, fields.recurrenceId, getField(item, fields.id));\n    setField(occurrenceItem, fields.start, occurrence.start.toLocalDate());\n    setField(occurrenceItem, fields.end, occurrence.end.toLocalDate());\n    setField(occurrenceItem, 'occurrenceId', idx);\n    return occurrenceItem;\n  });\n  return expanded;\n};","map":null,"metadata":{},"sourceType":"module"}