{"ast":null,"code":"export * from './utils/has-modifiers';\nexport * from './utils/parse-date-time';\nexport * from './utils/serialize-date-time';\nexport * from './utils/duration';\nimport { Day, ZonedDate } from '@progress/kendo-date-math';\nimport { parseDate } from '@telerik/kendo-intl';\n\nvar isOutOfRange = function (value, range) {\n  if (!range) {\n    return false;\n  }\n\n  var start = range.start,\n      end = range.end;\n  return value < start || value > end || value === 0 && start < 0;\n};\n/**\n * @hidden\n */\n\n\nexport var acsendingComparer = function (a, b) {\n  return a - b;\n};\n/**\n * @hidden\n */\n\nexport var parseArray = function (list, range) {\n  var result = [];\n\n  for (var idx = 0; idx < list.length; idx++) {\n    var value = parseInt(list[idx], 10);\n\n    if (isNaN(value) || isOutOfRange(value, range)) {\n      return [];\n    }\n\n    result.push(value);\n  }\n\n  return result.sort(acsendingComparer);\n};\nvar DATE_FORMATS = ['yyyyMMddTHHmmssSSSXXX', 'yyyyMMddTHHmmssXXX', 'yyyyMMddTHHmmss', 'yyyyMMddTHHmm', 'yyyyMMddTHH', 'yyyyMMdd'];\n/** @hidden */\n\nexport function toUTCDateTime(localDate) {\n  return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), localDate.getHours(), localDate.getMinutes(), localDate.getSeconds(), localDate.getMilliseconds()));\n}\n/**\n * @hidden\n */\n\nexport var parseISODate = function (value, timezone) {\n  var parsed = parseDate(value) || parseDate(value, DATE_FORMATS);\n\n  if (!parsed) {\n    return null;\n  }\n\n  var utcDate = timezone ? toUTCDateTime(parsed) : parsed;\n  return ZonedDate.fromUTCDate(utcDate, timezone || 'Etc/UTC');\n};\nvar WEEK_DAYS_IDX = {\n  'SU': Day.Sunday,\n  'MO': Day.Monday,\n  'TU': Day.Tuesday,\n  'WE': Day.Wednesday,\n  'TH': Day.Thursday,\n  'FR': Day.Friday,\n  'SA': Day.Saturday\n};\n/**\n * @hidden\n */\n\nexport var parseWeekDay = function (weekDay) {\n  return WEEK_DAYS_IDX[weekDay];\n};\n/**\n * @hidden\n */\n\nexport var parseWeekDayList = function (weekDays) {\n  var result = [];\n\n  for (var idx = 0; idx < weekDays.length; idx++) {\n    var value = weekDays[idx];\n    var day = parseWeekDay(value.substring(value.length - 2).toUpperCase());\n\n    if (day === undefined) {\n      return [];\n    }\n\n    result.push({\n      offset: parseInt(value.substring(0, value.length - 2), 10) || 0,\n      day: day\n    });\n  }\n\n  return result;\n};\n/**\n * @hidden\n * Sets week day with mutation.\n *\n * XXX: Remove once the recurrence engine is refactored\n */\n\nexport var setDayOfWeek = function (date, day, dir) {\n  if (dir === void 0) {\n    dir = 1;\n  }\n\n  day = (day - date.getUTCDay() + 7 * dir) % 7;\n  date.setUTCDate(date.getUTCDate() + day);\n};\n/**\n * @hidden\n */\n\nexport var normalizeDayIndex = function (weekDay, weekStart) {\n  return weekDay + (weekDay < weekStart ? 7 : 0);\n};","map":null,"metadata":{},"sourceType":"module"}