{"ast":null,"code":"import { cloneDate, firstDayOfMonth, Day } from '@progress/kendo-date-math';\nimport { setDayOfWeek, toUTCDateTime, normalizeDayIndex } from './utils';\n\nvar numberSortPredicate = function (a, b) {\n  return a - b;\n};\n\nvar weekInMonth = function (date, weekStart) {\n  var firstWeekDay = toUTCDateTime(firstDayOfMonth(date)).getUTCDay();\n  var firstWeekLength = 7 - (firstWeekDay + 7 - (weekStart || 7)) || 7;\n\n  if (firstWeekLength < 0) {\n    firstWeekLength += 7;\n  }\n\n  return Math.ceil((date.getUTCDate() - firstWeekLength) / 7) + 1;\n};\n\nvar weekInYear = function (date, weekStart) {\n  date = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()));\n  var year = date.getUTCFullYear();\n\n  if (weekStart !== undefined) {\n    setDayOfWeek(date, weekStart, -1);\n    date.setUTCDate(date.getUTCDate() + 4);\n  } else {\n    date.setUTCDate(date.getUTCDate() + (4 - (date.getUTCDay() || 7)));\n  }\n\n  var days = Math.floor((date.getTime() - Date.UTC(year, 0, 1, -6)) / 86400000);\n  return 1 + Math.floor(days / 7);\n};\n\nvar normalizeOffset = function (date, rule, weekStart) {\n  var offset = rule.offset;\n\n  if (!offset) {\n    return weekInMonth(date, weekStart);\n  }\n\n  var lastDate = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth() + 1, 0));\n  var weeksInMonth = weekInMonth(lastDate, weekStart);\n  var day = normalizeDayIndex(rule.day, weekStart);\n  var skipFirst = day < normalizeDayIndex(new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1)).getUTCDay(), weekStart);\n  var skipLast = day > normalizeDayIndex(lastDate.getUTCDay(), weekStart);\n\n  if (offset < 0) {\n    offset = weeksInMonth + (offset + 1 - (skipLast ? 1 : 0));\n  } else if (skipFirst) {\n    offset += 1;\n  }\n\n  weeksInMonth -= skipLast ? 1 : 0;\n\n  if (offset < (skipFirst ? 1 : 0) || offset > weeksInMonth) {\n    return null;\n  }\n\n  return offset;\n};\n\nvar isInWeek = function (date, rule, weekStart) {\n  return weekInMonth(date, weekStart) === normalizeOffset(date, rule, weekStart);\n};\n\nvar numberOfWeeks = function (date, weekStart) {\n  return weekInMonth(new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth() + 1, 0)), weekStart);\n};\n\nvar DAYS_IN_LEAPYEAR = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366];\nvar DAYS_IN_YEAR = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];\n\nvar leapYear = function (year) {\n  year = year.getUTCFullYear();\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n};\n\nvar dayInYear = function (date) {\n  var month = date.getUTCMonth();\n  var days = leapYear(date) ? DAYS_IN_LEAPYEAR[month] : DAYS_IN_YEAR[month];\n  return days + date.getUTCDate();\n};\n\nvar MONTHS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nvar getMonthLength = function (date) {\n  var month = date.getUTCMonth();\n\n  if (month === 1) {\n    if (new Date(Date.UTC(date.getUTCFullYear(), 1, 29)).getUTCMonth() === 1) {\n      return 29;\n    }\n\n    return 28;\n  }\n\n  return MONTHS[month];\n};\n\nvar ruleValues = function (rules, value, normalize) {\n  var length = rules.length;\n  var availableRules = [];\n\n  for (var idx = 0; idx < length; idx++) {\n    var ruleValue = rules[idx];\n\n    if (normalize) {\n      ruleValue = normalize(ruleValue);\n    }\n\n    if (value === ruleValue) {\n      return null;\n    } else if (value < ruleValue) {\n      availableRules.push(ruleValue);\n    }\n  }\n\n  return availableRules;\n};\n\nvar ruleWeekValues = function (days, date, weekStart) {\n  var currentDay = normalizeDayIndex(date.getUTCDay(), weekStart);\n  var length = days.length;\n  var ruleWeekOffset;\n  var weekDay, day;\n  var weekNumber;\n  var result = [];\n\n  for (var idx = 0; idx < length; idx++) {\n    weekDay = days[idx];\n    weekNumber = weekInMonth(date, weekStart);\n    ruleWeekOffset = normalizeOffset(date, weekDay, weekStart);\n\n    if (ruleWeekOffset === null) {\n      continue;\n    }\n\n    if (weekNumber < ruleWeekOffset) {\n      result.push(weekDay);\n    } else if (weekNumber === ruleWeekOffset) {\n      day = normalizeDayIndex(weekDay.day, weekStart);\n\n      if (currentDay < day) {\n        result.push(weekDay);\n      } else if (currentDay === day) {\n        return null;\n      }\n    }\n  }\n\n  return result;\n};\n/** @hidden */\n\n\nexport var byMonth = function (date, end, rule) {\n  var monthRules = rule.byMonth;\n  var monthRuleValues = ruleValues(monthRules, date.getUTCMonth() + 1);\n  var changed = false;\n\n  if (monthRuleValues !== null) {\n    if (monthRuleValues.length) {\n      date.setUTCMonth(monthRuleValues[0] - 1, 1);\n    } else {\n      date.setUTCFullYear(date.getUTCFullYear() + 1, monthRules[0] - 1, 1);\n    }\n\n    changed = true;\n  }\n\n  return changed;\n};\n/** @hidden */\n\nexport var byMonthDay = function (date, end, rule) {\n  var monthLength;\n  var changed = false;\n\n  function normalize(monthDay) {\n    if (monthDay < 0) {\n      monthDay = monthLength + monthDay + 1;\n    }\n\n    return monthDay;\n  }\n\n  while (date <= end) {\n    var month = date.getUTCMonth();\n    monthLength = getMonthLength(date);\n    var days = ruleValues(rule.byMonthDay, date.getUTCDate(), normalize);\n\n    if (days === null) {\n      return changed;\n    }\n\n    changed = true;\n\n    if (days.length) {\n      date.setUTCMonth(month, days.sort(numberSortPredicate)[0]);\n\n      if (month === date.getUTCMonth()) {\n        break;\n      }\n    } else {\n      date.setUTCMonth(month + 1, 1);\n    }\n  }\n\n  return changed;\n};\n/** @hidden */\n\nexport var byYearDay = function (date, end, rule) {\n  var year;\n  var changed = false;\n\n  function normalize(yearDay) {\n    if (yearDay < 0) {\n      yearDay = year + yearDay;\n    }\n\n    return yearDay;\n  }\n\n  while (date < end) {\n    year = leapYear(date) ? 366 : 365;\n    var days = ruleValues(rule.byYearDay, dayInYear(date), normalize);\n\n    if (days === null) {\n      return changed;\n    }\n\n    changed = true;\n    year = date.getUTCFullYear();\n\n    if (days.length) {\n      date.setUTCFullYear(year, 0, days.sort(numberSortPredicate)[0]);\n      break;\n    } else {\n      date.setUTCFullYear(year + 1, 0, 1);\n    }\n  }\n\n  return changed;\n};\n/** @hidden */\n\nexport var byWeekNumber = function (date, end, rule) {\n  var weekStart = rule.weekStart || Day.Monday;\n  var changed = false;\n\n  function normalize(week) {\n    if (week < 0) {\n      week = 53 + week;\n    }\n\n    return week;\n  }\n\n  while (date < end) {\n    var weekRuleValues = ruleValues(rule.byWeekNumber, weekInYear(date, weekStart), normalize);\n\n    if (weekRuleValues === null) {\n      return changed;\n    }\n\n    changed = true;\n    var year = date.getUTCFullYear();\n\n    if (weekRuleValues.length) {\n      var day = weekRuleValues.sort(numberSortPredicate)[0] * 7 - 1;\n      date.setUTCFullYear(year, 0, day);\n      setDayOfWeek(date, weekStart, -1);\n      break;\n    } else {\n      date.setUTCFullYear(year + 1, 0, 1);\n    }\n  }\n\n  return changed;\n};\n/** @hidden */\n\nexport var byWeekDay = function (startDate, end, rule) {\n  var ruleValue = rule.byWeekDay;\n  var weekStart = rule.weekStart || Day.Monday;\n  var weekDayRules = ruleWeekValues(ruleValue, startDate, weekStart);\n\n  if (weekDayRules === null) {\n    return false;\n  }\n\n  if (!weekDayRules[0]) {\n    weekDayRules = ruleValue;\n    setDayOfWeek(startDate, weekStart);\n  }\n\n  var results = weekDayRules.map(function (weekDayRule) {\n    var date = cloneDate(startDate);\n    var day = weekDayRule.day;\n\n    if (weekDayRule.offset) {\n      while (date <= end && !isInWeek(date, weekDayRule, weekStart)) {\n        if (weekInMonth(date, weekStart) === numberOfWeeks(date, weekStart)) {\n          date.setUTCMonth(date.getUTCMonth() + 1, 1);\n        } else {\n          date.setUTCDate(date.getUTCDate() + 7);\n          setDayOfWeek(date, weekStart, -1);\n        }\n      }\n    }\n\n    if (date.getUTCDay() !== day) {\n      setDayOfWeek(date, day);\n    }\n\n    return date;\n  }).sort(function (a, b) {\n    return a.getTime() - b.getTime();\n  });\n  var firstDate = results[0];\n\n  if (firstDate) {\n    startDate.setTime(firstDate);\n  }\n\n  return true;\n};\n/** @hidden */\n\nexport var byHour = function (date, end, rule) {\n  var hourRules = rule.byHour;\n  var changed = false;\n  var startTime = rule._startTime;\n  var startHours = startTime.getUTCHours();\n  var hourValues = ruleValues(hourRules, startHours);\n\n  if (hourValues !== null) {\n    changed = true;\n    date.setUTCHours(startHours);\n\n    if (hourValues.length) {\n      hourValues = hourValues[0];\n      date.setUTCHours(hourValues);\n    } else {\n      hourValues = date.getUTCHours();\n      date.setUTCDate(date.getUTCDate() + 1);\n      hourValues = hourRules[0];\n      date.setUTCHours(hourValues);\n    }\n\n    if (rule.byMinute) {\n      date.setUTCMinutes(0);\n    }\n\n    startTime.setUTCHours(hourValues, date.getUTCMinutes());\n  }\n\n  return changed;\n};\n/** @hidden */\n\nexport var byMinute = function (date, end, rule) {\n  var minuteRules = rule.byMinute;\n  var currentMinutes = date.getUTCMinutes();\n  var minuteValues = ruleValues(minuteRules, currentMinutes);\n\n  var startHours = rule._startTime.getUTCHours();\n\n  var changed = false;\n\n  if (minuteValues !== null) {\n    changed = true;\n\n    if (minuteValues.length) {\n      minuteValues = minuteValues[0];\n    } else {\n      startHours += 1;\n      minuteValues = minuteRules[0];\n    }\n\n    if (rule.bySecond) {\n      date.setUTCSeconds(0);\n    }\n\n    date.setUTCHours(startHours, minuteValues);\n    startHours = startHours % 24;\n\n    rule._startTime.setUTCHours(startHours, minuteValues, date.getUTCSeconds());\n  }\n\n  return changed;\n};\n/** @hidden */\n\nexport var bySecond = function (date, _end, rule) {\n  var secondRules = rule.bySecond;\n  var secondsValues = ruleValues(secondRules, date.getUTCSeconds());\n\n  var startHours = rule._startTime.getUTCHours();\n\n  var dateMinutes = date.getUTCMinutes();\n  var changed = false;\n\n  if (secondsValues !== null) {\n    changed = true;\n\n    if (secondsValues.length) {\n      date.setUTCSeconds(secondsValues[0]);\n    } else {\n      dateMinutes += 1;\n      date.setUTCMinutes(dateMinutes, secondRules[0]);\n\n      if (dateMinutes > 59) {\n        dateMinutes = dateMinutes % 60;\n        startHours = (startHours + 1) % 24;\n      }\n    }\n\n    rule._startTime.setUTCHours(startHours, dateMinutes, date.getUTCSeconds());\n  }\n\n  return changed;\n};","map":null,"metadata":{},"sourceType":"module"}