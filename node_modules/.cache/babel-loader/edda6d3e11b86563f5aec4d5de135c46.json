{"ast":null,"code":"import * as React from 'react';\nimport { SchedulerContext } from '../../context';\nimport { // deleteTitle,\nmessages, allDay } from '../../messages';\n/** @hidden */\n\nexport var AgendaFragment = React.forwardRef(function (props, ref) {\n  var element = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return element.current;\n  });\n\n  var _a = React.useContext(SchedulerContext),\n      localization = _a.localization,\n      intl = _a.intl; // const deleteMessage = localization.toLanguageString(deleteTitle, messages[deleteTitle]);\n  // const removable = props.editable; // && props.editable.remove !== false;\n\n\n  var color = props.resources && props.resources.find(function (r) {\n    return r.color !== undefined;\n  }) && props.resources.find(function (r) {\n    return r.color !== undefined;\n  }).color;\n  var time = props.isAllDay ? localization.toLanguageString(allDay, messages[allDay]) : getTimeFormat(intl, props);\n  return React.createElement(\"div\", {\n    className: \"k-scheduler-row\"\n  }, React.createElement(\"div\", {\n    className: \"k-scheduler-cell k-scheduler-timecolumn\"\n  }, React.createElement(\"div\", null, props.tail && React.createElement(\"span\", {\n    className: \"k-icon k-i-arrow-60-left\"\n  }), time, props.head && React.createElement(\"span\", {\n    className: \"k-icon k-i-arrow-60-right\"\n  }))), React.createElement(\"div\", {\n    className: \"k-scheduler-cell\"\n  }, React.createElement(\"div\", {\n    className: \"k-task\"\n  }, color && React.createElement(\"span\", {\n    className: \"k-scheduler-mark\",\n    style: {\n      color: color,\n      backgroundColor: color\n    }\n  }), props.isRecurring && React.createElement(\"span\", {\n    className: \"k-icon k-i-reload\"\n  }), props.isException && React.createElement(\"span\", {\n    className: \"k-icon k-i-non-recurrence\"\n  }), props.title)));\n});\n\nvar getTimeFormat = function (intl, props) {\n  var format = '{0:t}-{1:t}';\n\n  if (props.head) {\n    format = '{0:t}';\n  } else if (props.tail) {\n    format = '{1:t}';\n  }\n\n  return intl.format(format, props.zonedStart, props.zonedEnd);\n};","map":null,"metadata":{},"sourceType":"module"}