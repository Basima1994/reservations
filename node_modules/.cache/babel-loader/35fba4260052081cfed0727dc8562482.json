{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { SchedulerContext, SchedulerViewContext } from '../../context';\nimport { mapItemsToSlots, toSchedulerItems } from '../../utils';\nimport { fragmentSplit } from '../common/fragmentSplit';\n/** @hidden */\n\nexport var ResizeHint = function (props) {\n  var _a = React.useContext(SchedulerContext),\n      timezone = _a.timezone,\n      resources = _a.resources,\n      group = _a.group,\n      fields = _a.fields;\n\n  var _b = React.useContext(SchedulerViewContext),\n      slots = _b.slots,\n      ranges = _b.ranges,\n      dateRange = _b.dateRange;\n\n  var processedData = toSchedulerItems({\n    data: [props.item],\n    fields: fields,\n    resources: resources,\n    timezone: timezone,\n    group: group,\n    dateRange: dateRange\n  });\n  var items = props.toViewItems({\n    rangeStart: dateRange.start,\n    rangeEnd: dateRange.end,\n    timezone: timezone,\n    ranges: ranges,\n    data: processedData\n  });\n  React.useMemo(function () {\n    return mapItemsToSlots(items, slots || [], props.sameRange && !props.isAllDay);\n  }, [props.item, slots]);\n  var fragments = items.reduce(function (acc, item) {\n    return acc.concat(fragmentSplit(item, ranges));\n  }, []);\n  return React.createElement(React.Fragment, null, fragments.map(function (fragment, idx) {\n    return React.createElement(props.component, __assign({\n      key: idx\n    }, props.item, fragment, {\n      resizeHint: true,\n      vertical: props.vertical\n    }));\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}