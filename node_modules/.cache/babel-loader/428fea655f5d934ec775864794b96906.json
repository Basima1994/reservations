{"ast":null,"code":"// // import React, { Component } from \"react\";\n// // import NavBar from \"./NavBar\";\n// // // export default class Calender extends React.Component {}\n// // import Calendar from \"@material-ui/DatePicker/Calendar\";\n// // export default class DateSelector extends React.Component {\n// //   render() {\n// //     return <Calendar></Calendar>;\n// //   }\n// // }\n// import React, { Component, PropTypes } from \"react\";\n// import EventListener from \"react-event-listener\";\n// import keycode from \"keycode\";\n// import transitions from \"../styles/transitions\";\n// import CalendarActionButtons from \"./CalendarActionButtons\";\n// import CalendarMonth from \"./CalendarMonth\";\n// import CalendarYear from \"./CalendarYear\";\n// import CalendarToolbar from \"./CalendarToolbar\";\n// import DateDisplay from \"./DateDisplay\";\n// import SlideInTransitionGroup from \"../internal/SlideIn\";\n// import {\n//   addDays,\n//   addMonths,\n//   addYears,\n//   cloneDate,\n//   dateTimeFormat,\n//   isAfterDate,\n//   isBeforeDate,\n//   getFirstDayOfMonth,\n//   localizedWeekday,\n//   monthDiff\n// } from \"./dateUtils\";\n// const daysArray = [...Array(7)];\n// class Calendar extends Component {\n//   static propTypes = {\n//     DateTimeFormat: PropTypes.func.isRequired,\n//     autoOk: PropTypes.bool,\n//     cancelLabel: PropTypes.node,\n//     disableYearSelection: PropTypes.bool,\n//     firstDayOfWeek: PropTypes.number,\n//     initialDate: PropTypes.object,\n//     locale: PropTypes.string.isRequired,\n//     maxDate: PropTypes.object,\n//     minDate: PropTypes.object,\n//     mode: PropTypes.oneOf([\"portrait\", \"landscape\"]),\n//     okLabel: PropTypes.node,\n//     onTouchTapCancel: PropTypes.func,\n//     onTouchTapDay: PropTypes.func,\n//     onTouchTapOk: PropTypes.func,\n//     open: PropTypes.bool,\n//     shouldDisableDate: PropTypes.func\n//   };\n//   static defaultProps = {\n//     DateTimeFormat: dateTimeFormat,\n//     disableYearSelection: false,\n//     initialDate: new Date(),\n//     locale: \"en-US\",\n//     minDate: addYears(new Date(), -100),\n//     maxDate: addYears(new Date(), 100)\n//   };\n//   static contextTypes = {\n//     muiTheme: PropTypes.object.isRequired\n//   };\n//   state = {\n//     displayDate: undefined,\n//     displayMonthDay: true,\n//     selectedDate: undefined,\n//     transitionDirection: \"left\",\n//     transitionEnter: true\n//   };\n//   componentWillMount() {\n//     this.setState({\n//       displayDate: getFirstDayOfMonth(this.props.initialDate),\n//       selectedDate: this.props.initialDate\n//     });\n//   }\n//   componentWillReceiveProps(nextProps) {\n//     if (nextProps.initialDate !== this.props.initialDate) {\n//       const date = nextProps.initialDate || new Date();\n//       this.setState({\n//         displayDate: getFirstDayOfMonth(date),\n//         selectedDate: date\n//       });\n//     }\n//   }\n//   getSelectedDate() {\n//     return this.state.selectedDate;\n//   }\n//   isSelectedDateDisabled() {\n//     if (!this.state.displayMonthDay) {\n//       return false;\n//     }\n//     return this.refs.calendar.isSelectedDateDisabled();\n//   }\n//   addSelectedDays(days) {\n//     this.setSelectedDate(addDays(this.state.selectedDate, days));\n//   }\n//   addSelectedMonths(months) {\n//     this.setSelectedDate(addMonths(this.state.selectedDate, months));\n//   }\n//   addSelectedYears(years) {\n//     this.setSelectedDate(addYears(this.state.selectedDate, years));\n//   }\n//   setDisplayDate(date, newSelectedDate) {\n//     const newDisplayDate = getFirstDayOfMonth(date);\n//     const direction =\n//       newDisplayDate > this.state.displayDate ? \"left\" : \"right\";\n//     if (newDisplayDate !== this.state.displayDate) {\n//       this.setState({\n//         displayDate: newDisplayDate,\n//         transitionDirection: direction,\n//         selectedDate: newSelectedDate || this.state.selectedDate\n//       });\n//     }\n//   }\n//   setSelectedDate(date) {\n//     let adjustedDate = date;\n//     if (isBeforeDate(date, this.props.minDate)) {\n//       adjustedDate = this.props.minDate;\n//     } else if (isAfterDate(date, this.props.maxDate)) {\n//       adjustedDate = this.props.maxDate;\n//     }\n//     const newDisplayDate = getFirstDayOfMonth(adjustedDate);\n//     if (newDisplayDate !== this.state.displayDate) {\n//       this.setDisplayDate(newDisplayDate, adjustedDate);\n//     } else {\n//       this.setState({\n//         selectedDate: adjustedDate\n//       });\n//     }\n//   }\n//   handleTouchTapDay = (event, date) => {\n//     this.setSelectedDate(date);\n//     if (this.props.onTouchTapDay) this.props.onTouchTapDay(event, date);\n//   };\n//   handleMonthChange = months => {\n//     this.setState({\n//       transitionDirection: months >= 0 ? \"left\" : \"right\",\n//       displayDate: addMonths(this.state.displayDate, months)\n//     });\n//   };\n//   handleTouchTapYear = (event, year) => {\n//     const date = cloneDate(this.state.selectedDate);\n//     date.setFullYear(year);\n//     this.setSelectedDate(date, event);\n//   };\n//   getToolbarInteractions() {\n//     return {\n//       prevMonth: monthDiff(this.state.displayDate, this.props.minDate) > 0,\n//       nextMonth: monthDiff(this.state.displayDate, this.props.maxDate) < 0\n//     };\n//   }\n//   handleTouchTapDateDisplayMonthDay = () => {\n//     this.setState({\n//       displayMonthDay: true\n//     });\n//   };\n//   handleTouchTapDateDisplayYear = () => {\n//     this.setState({\n//       displayMonthDay: false\n//     });\n//   };\n//   handleWindowKeyDown = event => {\n//     if (this.props.open) {\n//       switch (keycode(event)) {\n//         case \"up\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(-1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(-1);\n//           } else {\n//             this.addSelectedDays(-7);\n//           }\n//           break;\n//         case \"down\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(1);\n//           } else {\n//             this.addSelectedDays(7);\n//           }\n//           break;\n//         case \"right\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(1);\n//           } else {\n//             this.addSelectedDays(1);\n//           }\n//           break;\n//         case \"left\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(-1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(-1);\n//           } else {\n//             this.addSelectedDays(-1);\n//           }\n//           break;\n//       }\n//     }\n//   };\n//   yearSelector() {\n//     if (!this.props.disableYearSelection) {\n//       return (\n//         <CalendarYear\n//           key=\"years\"\n//           DateTimeFormat={this.props.DateTimeFormat}\n//           locale={this.props.locale}\n//           onTouchTapYear={this.handleTouchTapYear}\n//           selectedDate={this.state.selectedDate}\n//           minDate={this.props.minDate}\n//           maxDate={this.props.maxDate}\n//         />\n//       );\n//     }\n//   }\n//   render() {\n//     const { prepareStyles } = this.context.muiTheme;\n//     const toolbarInteractions = this.getToolbarInteractions();\n//     const isLandscape = this.props.mode === \"landscape\";\n//     const { calendarTextColor } = this.context.muiTheme.datePicker;\n//     const styles = {\n//       root: {\n//         color: calendarTextColor,\n//         userSelect: \"none\",\n//         width: isLandscape ? 479 : 310\n//       },\n//       calendar: {\n//         display: \"flex\",\n//         flexDirection: \"column\"\n//       },\n//       calendarContainer: {\n//         display: \"flex\",\n//         alignContent: \"space-between\",\n//         justifyContent: \"space-between\",\n//         flexDirection: \"column\",\n//         fontSize: 12,\n//         fontWeight: 400,\n//         padding: \"0px 8px\",\n//         transition: transitions.easeOut()\n//       },\n//       yearContainer: {\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         flexDirection: \"column\",\n//         height: 272,\n//         marginTop: 10,\n//         overflow: \"hidden\",\n//         width: 310\n//       },\n//       weekTitle: {\n//         display: \"flex\",\n//         flexDirection: \"row\",\n//         justifyContent: \"space-between\",\n//         fontWeight: \"500\",\n//         height: 20,\n//         lineHeight: \"15px\",\n//         opacity: \"0.5\",\n//         textAlign: \"center\"\n//       },\n//       weekTitleDay: {\n//         width: 42\n//       },\n//       transitionSlide: {\n//         height: 214\n//       }\n//     };\n//     const weekTitleDayStyle = prepareStyles(styles.weekTitleDay);\n//     const {\n//       minDate,\n//       maxDate,\n//       cancelLabel,\n//       DateTimeFormat,\n//       firstDayOfWeek,\n//       locale,\n//       okLabel,\n//       onTouchTapCancel, // eslint-disable-line no-unused-vars\n//       onTouchTapOk // eslint-disable-line no-unused-vars\n//     } = this.props;\n//     return (\n//       <div style={prepareStyles(styles.root)}>\n//         <EventListener target=\"window\" onKeyDown={this.handleWindowKeyDown} />\n//         <DateDisplay\n//           DateTimeFormat={DateTimeFormat}\n//           disableYearSelection={this.props.disableYearSelection}\n//           onTouchTapMonthDay={this.handleTouchTapDateDisplayMonthDay}\n//           onTouchTapYear={this.handleTouchTapDateDisplayYear}\n//           locale={locale}\n//           monthDaySelected={this.state.displayMonthDay}\n//           mode={this.props.mode}\n//           selectedDate={this.state.selectedDate}\n//         />\n//         <div style={prepareStyles(styles.calendar)}>\n//           {this.state.displayMonthDay && (\n//             <div style={prepareStyles(styles.calendarContainer)}>\n//               <CalendarToolbar\n//                 DateTimeFormat={DateTimeFormat}\n//                 locale={locale}\n//                 displayDate={this.state.displayDate}\n//                 onMonthChange={this.handleMonthChange}\n//                 prevMonth={toolbarInteractions.prevMonth}\n//                 nextMonth={toolbarInteractions.nextMonth}\n//               />\n//               <div style={prepareStyles(styles.weekTitle)}>\n//                 {daysArray.map((event, i) => (\n//                   <span key={i} style={weekTitleDayStyle}>\n//                     {localizedWeekday(\n//                       DateTimeFormat,\n//                       locale,\n//                       i,\n//                       firstDayOfWeek\n//                     )}\n//                   </span>\n//                 ))}\n//               </div>\n//               <SlideInTransitionGroup\n//                 direction={this.state.transitionDirection}\n//                 style={styles.transitionSlide}\n//               >\n//                 <CalendarMonth\n//                   DateTimeFormat={DateTimeFormat}\n//                   locale={locale}\n//                   displayDate={this.state.displayDate}\n//                   firstDayOfWeek={this.props.firstDayOfWeek}\n//                   key={this.state.displayDate.toDateString()}\n//                   minDate={minDate}\n//                   maxDate={maxDate}\n//                   onTouchTapDay={this.handleTouchTapDay}\n//                   ref=\"calendar\"\n//                   selectedDate={this.state.selectedDate}\n//                   shouldDisableDate={this.props.shouldDisableDate}\n//                 />\n//               </SlideInTransitionGroup>\n//             </div>\n//           )}\n//           {!this.state.displayMonthDay && (\n//             <div style={prepareStyles(styles.yearContainer)}>\n//               {this.yearSelector()}\n//             </div>\n//           )}\n//           {okLabel && (\n//             <CalendarActionButtons\n//               autoOk={this.props.autoOk}\n//               cancelLabel={cancelLabel}\n//               okLabel={okLabel}\n//               onTouchTapCancel={onTouchTapCancel}\n//               onTouchTapOk={onTouchTapOk}\n//             />\n//           )}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Calendar;","map":{"version":3,"sources":["/Users/rbk-4/Desktop/MVP-JS/src/Calender.js"],"names":[],"mappingssourcesContent":["// // import React, { Component } from \"react\";\n// // import NavBar from \"./NavBar\";\n\n// // // export default class Calender extends React.Component {}\n// // import Calendar from \"@material-ui/DatePicker/Calendar\";\n\n// // export default class DateSelector extends React.Component {\n// //   render() {\n// //     return <Calendar></Calendar>;\n// //   }\n// // }\n// import React, { Component, PropTypes } from \"react\";\n// import EventListener from \"react-event-listener\";\n// import keycode from \"keycode\";\n// import transitions from \"../styles/transitions\";\n// import CalendarActionButtons from \"./CalendarActionButtons\";\n// import CalendarMonth from \"./CalendarMonth\";\n// import CalendarYear from \"./CalendarYear\";\n// import CalendarToolbar from \"./CalendarToolbar\";\n// import DateDisplay from \"./DateDisplay\";\n// import SlideInTransitionGroup from \"../internal/SlideIn\";\n\n// import {\n//   addDays,\n//   addMonths,\n//   addYears,\n//   cloneDate,\n//   dateTimeFormat,\n//   isAfterDate,\n//   isBeforeDate,\n//   getFirstDayOfMonth,\n//   localizedWeekday,\n//   monthDiff\n// } from \"./dateUtils\";\n\n// const daysArray = [...Array(7)];\n\n// class Calendar extends Component {\n//   static propTypes = {\n//     DateTimeFormat: PropTypes.func.isRequired,\n//     autoOk: PropTypes.bool,\n//     cancelLabel: PropTypes.node,\n//     disableYearSelection: PropTypes.bool,\n//     firstDayOfWeek: PropTypes.number,\n//     initialDate: PropTypes.object,\n//     locale: PropTypes.string.isRequired,\n//     maxDate: PropTypes.object,\n//     minDate: PropTypes.object,\n//     mode: PropTypes.oneOf([\"portrait\", \"landscape\"]),\n//     okLabel: PropTypes.node,\n//     onTouchTapCancel: PropTypes.func,\n//     onTouchTapDay: PropTypes.func,\n//     onTouchTapOk: PropTypes.func,\n//     open: PropTypes.bool,\n//     shouldDisableDate: PropTypes.func\n//   };\n\n//   static defaultProps = {\n//     DateTimeFormat: dateTimeFormat,\n//     disableYearSelection: false,\n//     initialDate: new Date(),\n//     locale: \"en-US\",\n//     minDate: addYears(new Date(), -100),\n//     maxDate: addYears(new Date(), 100)\n//   };\n\n//   static contextTypes = {\n//     muiTheme: PropTypes.object.isRequired\n//   };\n\n//   state = {\n//     displayDate: undefined,\n//     displayMonthDay: true,\n//     selectedDate: undefined,\n//     transitionDirection: \"left\",\n//     transitionEnter: true\n//   };\n\n//   componentWillMount() {\n//     this.setState({\n//       displayDate: getFirstDayOfMonth(this.props.initialDate),\n//       selectedDate: this.props.initialDate\n//     });\n//   }\n\n//   componentWillReceiveProps(nextProps) {\n//     if (nextProps.initialDate !== this.props.initialDate) {\n//       const date = nextProps.initialDate || new Date();\n//       this.setState({\n//         displayDate: getFirstDayOfMonth(date),\n//         selectedDate: date\n//       });\n//     }\n//   }\n\n//   getSelectedDate() {\n//     return this.state.selectedDate;\n//   }\n\n//   isSelectedDateDisabled() {\n//     if (!this.state.displayMonthDay) {\n//       return false;\n//     }\n\n//     return this.refs.calendar.isSelectedDateDisabled();\n//   }\n\n//   addSelectedDays(days) {\n//     this.setSelectedDate(addDays(this.state.selectedDate, days));\n//   }\n\n//   addSelectedMonths(months) {\n//     this.setSelectedDate(addMonths(this.state.selectedDate, months));\n//   }\n\n//   addSelectedYears(years) {\n//     this.setSelectedDate(addYears(this.state.selectedDate, years));\n//   }\n\n//   setDisplayDate(date, newSelectedDate) {\n//     const newDisplayDate = getFirstDayOfMonth(date);\n//     const direction =\n//       newDisplayDate > this.state.displayDate ? \"left\" : \"right\";\n\n//     if (newDisplayDate !== this.state.displayDate) {\n//       this.setState({\n//         displayDate: newDisplayDate,\n//         transitionDirection: direction,\n//         selectedDate: newSelectedDate || this.state.selectedDate\n//       });\n//     }\n//   }\n\n//   setSelectedDate(date) {\n//     let adjustedDate = date;\n//     if (isBeforeDate(date, this.props.minDate)) {\n//       adjustedDate = this.props.minDate;\n//     } else if (isAfterDate(date, this.props.maxDate)) {\n//       adjustedDate = this.props.maxDate;\n//     }\n\n//     const newDisplayDate = getFirstDayOfMonth(adjustedDate);\n//     if (newDisplayDate !== this.state.displayDate) {\n//       this.setDisplayDate(newDisplayDate, adjustedDate);\n//     } else {\n//       this.setState({\n//         selectedDate: adjustedDate\n//       });\n//     }\n//   }\n\n//   handleTouchTapDay = (event, date) => {\n//     this.setSelectedDate(date);\n//     if (this.props.onTouchTapDay) this.props.onTouchTapDay(event, date);\n//   };\n\n//   handleMonthChange = months => {\n//     this.setState({\n//       transitionDirection: months >= 0 ? \"left\" : \"right\",\n//       displayDate: addMonths(this.state.displayDate, months)\n//     });\n//   };\n\n//   handleTouchTapYear = (event, year) => {\n//     const date = cloneDate(this.state.selectedDate);\n//     date.setFullYear(year);\n//     this.setSelectedDate(date, event);\n//   };\n\n//   getToolbarInteractions() {\n//     return {\n//       prevMonth: monthDiff(this.state.displayDate, this.props.minDate) > 0,\n//       nextMonth: monthDiff(this.state.displayDate, this.props.maxDate) < 0\n//     };\n//   }\n\n//   handleTouchTapDateDisplayMonthDay = () => {\n//     this.setState({\n//       displayMonthDay: true\n//     });\n//   };\n\n//   handleTouchTapDateDisplayYear = () => {\n//     this.setState({\n//       displayMonthDay: false\n//     });\n//   };\n\n//   handleWindowKeyDown = event => {\n//     if (this.props.open) {\n//       switch (keycode(event)) {\n//         case \"up\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(-1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(-1);\n//           } else {\n//             this.addSelectedDays(-7);\n//           }\n//           break;\n\n//         case \"down\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(1);\n//           } else {\n//             this.addSelectedDays(7);\n//           }\n//           break;\n\n//         case \"right\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(1);\n//           } else {\n//             this.addSelectedDays(1);\n//           }\n//           break;\n\n//         case \"left\":\n//           if (event.altKey && event.shiftKey) {\n//             this.addSelectedYears(-1);\n//           } else if (event.shiftKey) {\n//             this.addSelectedMonths(-1);\n//           } else {\n//             this.addSelectedDays(-1);\n//           }\n//           break;\n//       }\n//     }\n//   };\n\n//   yearSelector() {\n//     if (!this.props.disableYearSelection) {\n//       return (\n//         <CalendarYear\n//           key=\"years\"\n//           DateTimeFormat={this.props.DateTimeFormat}\n//           locale={this.props.locale}\n//           onTouchTapYear={this.handleTouchTapYear}\n//           selectedDate={this.state.selectedDate}\n//           minDate={this.props.minDate}\n//           maxDate={this.props.maxDate}\n//         />\n//       );\n//     }\n//   }\n\n//   render() {\n//     const { prepareStyles } = this.context.muiTheme;\n//     const toolbarInteractions = this.getToolbarInteractions();\n//     const isLandscape = this.props.mode === \"landscape\";\n//     const { calendarTextColor } = this.context.muiTheme.datePicker;\n\n//     const styles = {\n//       root: {\n//         color: calendarTextColor,\n//         userSelect: \"none\",\n//         width: isLandscape ? 479 : 310\n//       },\n//       calendar: {\n//         display: \"flex\",\n//         flexDirection: \"column\"\n//       },\n//       calendarContainer: {\n//         display: \"flex\",\n//         alignContent: \"space-between\",\n//         justifyContent: \"space-between\",\n//         flexDirection: \"column\",\n//         fontSize: 12,\n//         fontWeight: 400,\n//         padding: \"0px 8px\",\n//         transition: transitions.easeOut()\n//       },\n//       yearContainer: {\n//         display: \"flex\",\n//         justifyContent: \"space-between\",\n//         flexDirection: \"column\",\n//         height: 272,\n//         marginTop: 10,\n//         overflow: \"hidden\",\n//         width: 310\n//       },\n//       weekTitle: {\n//         display: \"flex\",\n//         flexDirection: \"row\",\n//         justifyContent: \"space-between\",\n//         fontWeight: \"500\",\n//         height: 20,\n//         lineHeight: \"15px\",\n//         opacity: \"0.5\",\n//         textAlign: \"center\"\n//       },\n//       weekTitleDay: {\n//         width: 42\n//       },\n//       transitionSlide: {\n//         height: 214\n//       }\n//     };\n\n//     const weekTitleDayStyle = prepareStyles(styles.weekTitleDay);\n\n//     const {\n//       minDate,\n//       maxDate,\n//       cancelLabel,\n//       DateTimeFormat,\n//       firstDayOfWeek,\n//       locale,\n//       okLabel,\n//       onTouchTapCancel, // eslint-disable-line no-unused-vars\n//       onTouchTapOk // eslint-disable-line no-unused-vars\n//     } = this.props;\n\n//     return (\n//       <div style={prepareStyles(styles.root)}>\n//         <EventListener target=\"window\" onKeyDown={this.handleWindowKeyDown} />\n//         <DateDisplay\n//           DateTimeFormat={DateTimeFormat}\n//           disableYearSelection={this.props.disableYearSelection}\n//           onTouchTapMonthDay={this.handleTouchTapDateDisplayMonthDay}\n//           onTouchTapYear={this.handleTouchTapDateDisplayYear}\n//           locale={locale}\n//           monthDaySelected={this.state.displayMonthDay}\n//           mode={this.props.mode}\n//           selectedDate={this.state.selectedDate}\n//         />\n//         <div style={prepareStyles(styles.calendar)}>\n//           {this.state.displayMonthDay && (\n//             <div style={prepareStyles(styles.calendarContainer)}>\n//               <CalendarToolbar\n//                 DateTimeFormat={DateTimeFormat}\n//                 locale={locale}\n//                 displayDate={this.state.displayDate}\n//                 onMonthChange={this.handleMonthChange}\n//                 prevMonth={toolbarInteractions.prevMonth}\n//                 nextMonth={toolbarInteractions.nextMonth}\n//               />\n//               <div style={prepareStyles(styles.weekTitle)}>\n//                 {daysArray.map((event, i) => (\n//                   <span key={i} style={weekTitleDayStyle}>\n//                     {localizedWeekday(\n//                       DateTimeFormat,\n//                       locale,\n//                       i,\n//                       firstDayOfWeek\n//                     )}\n//                   </span>\n//                 ))}\n//               </div>\n//               <SlideInTransitionGroup\n//                 direction={this.state.transitionDirection}\n//                 style={styles.transitionSlide}\n//               >\n//                 <CalendarMonth\n//                   DateTimeFormat={DateTimeFormat}\n//                   locale={locale}\n//                   displayDate={this.state.displayDate}\n//                   firstDayOfWeek={this.props.firstDayOfWeek}\n//                   key={this.state.displayDate.toDateString()}\n//                   minDate={minDate}\n//                   maxDate={maxDate}\n//                   onTouchTapDay={this.handleTouchTapDay}\n//                   ref=\"calendar\"\n//                   selectedDate={this.state.selectedDate}\n//                   shouldDisableDate={this.props.shouldDisableDate}\n//                 />\n//               </SlideInTransitionGroup>\n//             </div>\n//           )}\n//           {!this.state.displayMonthDay && (\n//             <div style={prepareStyles(styles.yearContainer)}>\n//               {this.yearSelector()}\n//             </div>\n//           )}\n//           {okLabel && (\n//             <CalendarActionButtons\n//               autoOk={this.props.autoOk}\n//               cancelLabel={cancelLabel}\n//               okLabel={okLabel}\n//               onTouchTapCancel={onTouchTapCancel}\n//               onTouchTapOk={onTouchTapOk}\n//             />\n//           )}\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Calendar;\n"]},"metadata":{},"sourceType":"module"}