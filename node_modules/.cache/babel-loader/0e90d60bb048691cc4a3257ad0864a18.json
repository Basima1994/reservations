{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { intersects } from '../../utils';\n/** @hidden */\n\nexport var fragmentSplit = function (item, ranges) {\n  var result = [];\n\n  if (!item.groups || !item.groups.length) {\n    (ranges || item.ranges).map(function (range) {\n      if (intersects(item.start, item.end, range.start, range.end)) {\n        result.push(__assign({}, item, {\n          ranges: [range],\n          range: range,\n          slots: item.slots.filter(function (slot) {\n            return intersects(slot.start, slot.end, range.start, range.end);\n          }),\n          head: item.head || item.end > range.end,\n          tail: item.tail || item.start < range.start\n        }));\n      }\n    });\n  } else {\n    item.groups.forEach(function (group) {\n      (ranges || item.ranges).forEach(function (range) {\n        if (intersects(item.start, item.end, range.start, range.end)) {\n          if (item.start < range.start) {\n            result.push(__assign({}, item, {\n              start: range.start,\n              groups: [group],\n              ranges: [range],\n              group: group,\n              range: range,\n              resources: group.resources,\n              slots: item.slots.filter(function (slot) {\n                return intersects(slot.start, slot.end, range.start, range.end) && group.index === slot.groupIndex;\n              }),\n              tail: true\n            }));\n            return;\n          }\n\n          if (item.end > range.end) {\n            result.push(__assign({}, item, {\n              end: range.end,\n              groups: [group],\n              ranges: [range],\n              group: group,\n              range: range,\n              resources: group.resources,\n              slots: item.slots.filter(function (slot) {\n                return intersects(slot.start, slot.end, range.start, range.end) && group.index === slot.groupIndex;\n              }),\n              head: true\n            }));\n            return;\n          }\n\n          result.push(__assign({}, item, {\n            groups: [group],\n            ranges: [range],\n            group: group,\n            range: range,\n            resources: group.resources,\n            slots: item.slots.filter(function (slot) {\n              return intersects(slot.start, slot.end, range.start, range.end) && group.index === slot.groupIndex;\n            })\n          }));\n        }\n      });\n    });\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}