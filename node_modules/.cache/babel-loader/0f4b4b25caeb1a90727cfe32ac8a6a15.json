{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { MS_PER_DAY, MS_PER_HOUR } from '@progress/kendo-date-math';\nimport * as limitations from './limitations';\nimport { setDayOfWeek, normalizeDayIndex, hasModifiers } from './utils';\nvar RULE_NAMES = ['byMonth', 'byWeekNumber', 'byYearDay', 'byMonthDay', 'byWeekDay', 'byHour', 'byMinute', 'bySecond'];\nvar RULE_NAMES_LENGTH = RULE_NAMES.length;\n\nvar intervalExcess = function (diff, interval) {\n  var excess;\n\n  if (diff !== 0 && diff < interval) {\n    excess = interval - diff;\n  } else {\n    excess = diff % interval;\n\n    if (excess) {\n      excess = interval - excess;\n    }\n  }\n\n  return excess;\n};\n\nvar addTime = function (date, time) {\n  date.setTime(date.getTime() + time);\n};\n/** @hidden */\n\n\nvar BaseFrequency =\n/** @class */\nfunction () {\n  function BaseFrequency() {}\n\n  BaseFrequency.prototype.next = function (date, rule) {\n    var startTime = rule._startTime;\n    var minutes, seconds;\n\n    if (rule.bySecond) {\n      seconds = date.getUTCSeconds() + 1;\n      date.setUTCSeconds(seconds);\n      startTime.setUTCSeconds(seconds);\n    } else if (rule.byMinute) {\n      minutes = date.getUTCMinutes() + 1;\n      date.setUTCMinutes(minutes);\n      startTime.setUTCMinutes(minutes);\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n  BaseFrequency.prototype.normalize = function (options) {\n    var rule = options.rule;\n\n    if (options.idx === 4 && rule.byHour) {\n      rule._startTime.setUTCHours(0);\n\n      this._hour(options.date, rule);\n    }\n  };\n\n  BaseFrequency.prototype.limit = function (date, end, rule) {\n    var interval = rule.interval || 1;\n    var idx;\n\n    while (date <= end) {\n      var modified = undefined;\n      var firstRule = undefined;\n      var day = date.getUTCDate();\n\n      for (idx = 0; idx < RULE_NAMES_LENGTH; idx++) {\n        var ruleName = RULE_NAMES[idx];\n\n        if (rule[ruleName]) {\n          modified = limitations[ruleName](date, end, rule);\n\n          if (firstRule !== undefined && modified) {\n            break;\n          } else {\n            firstRule = modified;\n          }\n        }\n\n        if (modified) {\n          this.normalize({\n            date: date,\n            rule: rule,\n            day: day,\n            idx: idx\n          });\n        }\n      }\n\n      if ((interval === 1 || !this.interval(rule, date)) && idx === RULE_NAMES_LENGTH) {\n        break;\n      }\n    }\n  };\n\n  BaseFrequency.prototype.interval = function (rule, current) {\n    var start = rule._startPeriod.toUTCDate();\n\n    var hours = current.getUTCHours();\n    var weekStart = rule.weekStart;\n    var interval = rule.interval;\n    var frequency = rule.freq;\n    var date = new Date(current);\n    var modified = false;\n    var excess = 0;\n    var month = 0;\n    var day = 1;\n    var diff;\n    var startTimeHours;\n\n    if (frequency === 'hourly') {\n      startTimeHours = rule._startTime.getUTCHours();\n      date = date.getTime();\n\n      if (hours !== startTimeHours) {\n        date += (startTimeHours - hours) * MS_PER_HOUR;\n      }\n\n      date -= start.getTime();\n      diff = Math.floor(date / MS_PER_HOUR);\n      excess = intervalExcess(diff, interval);\n\n      if (excess !== 0) {\n        this._hour(current, rule, excess);\n\n        modified = true;\n      }\n    } else if (frequency === 'daily') {\n      addTime(date, -start);\n      diff = Math.round(date / MS_PER_DAY);\n      excess = intervalExcess(diff, interval);\n\n      if (excess !== 0) {\n        this._date(current, rule, excess);\n\n        modified = true;\n      }\n    } else if (frequency === 'weekly') {\n      excess = this.getNumberOfWeeksBetweenDates(start, current);\n      var normalizedCurrentIndex = normalizeDayIndex(current.getUTCDay(), weekStart);\n      var normalizedStartIndex = normalizeDayIndex(start.getUTCDay(), weekStart);\n\n      if (normalizedCurrentIndex < normalizedStartIndex) {\n        excess += 1;\n      }\n\n      excess = intervalExcess(excess, interval);\n\n      if (excess !== 0) {\n        setDayOfWeek(current, rule.weekStart, -1);\n        current.setUTCDate(current.getUTCDate() + excess * 7);\n        modified = true;\n      }\n    } else if (frequency === 'monthly') {\n      diff = current.getUTCFullYear() - start.getUTCFullYear();\n      diff = current.getUTCMonth() - start.getUTCMonth() + diff * 12;\n      excess = intervalExcess(diff, interval);\n\n      if (excess !== 0) {\n        day = hasModifiers(rule) ? 1 : current.getDate();\n        current.setUTCFullYear(current.getUTCFullYear(), current.getUTCMonth() + excess, day);\n        modified = true;\n      }\n    } else if (frequency === 'yearly') {\n      diff = current.getUTCFullYear() - start.getUTCFullYear();\n      excess = intervalExcess(diff, interval);\n\n      if (!rule.byMonth) {\n        month = current.getUTCMonth();\n      }\n\n      if (!rule.byYearDay && !rule.byMonthDay && !rule.byWeekDay) {\n        day = current.getUTCDate();\n      }\n\n      if (excess !== 0) {\n        current.setUTCFullYear(current.getUTCFullYear() + excess, month, day);\n        modified = true;\n      }\n    }\n\n    return modified;\n  };\n\n  BaseFrequency.prototype._hour = function (date, rule, interval) {\n    var startTime = rule._startTime;\n    var hours = startTime.getUTCHours();\n\n    if (interval) {\n      hours += interval;\n    }\n\n    date.setUTCHours(hours);\n    hours = hours % 24;\n    startTime.setUTCHours(hours);\n  };\n\n  BaseFrequency.prototype._date = function (date, rule, interval) {\n    date.setUTCDate(date.getUTCDate() + interval);\n  };\n\n  BaseFrequency.prototype.getNumberOfWeeksBetweenDates = function (first, second) {\n    var weeks = (second.getTime() - first.getTime()) / 604800000;\n    var exactWeeks = Math.floor(weeks); // DST change occurrs in week?\n\n    if (weeks - exactWeeks > 0.99) {\n      exactWeeks = Math.round(weeks);\n    }\n\n    return exactWeeks;\n  };\n\n  return BaseFrequency;\n}();\n\nexport { BaseFrequency };\n/** @hidden */\n\nvar HourlyFrequency =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(HourlyFrequency, _super);\n\n  function HourlyFrequency() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  HourlyFrequency.prototype.next = function (date, rule) {\n    if (!BaseFrequency.prototype.next.call(this, date, rule)) {\n      this._hour(date, rule, 1);\n    }\n\n    return false;\n  };\n\n  HourlyFrequency.prototype.normalize = function (options) {\n    var rule = options.rule;\n\n    if (options.idx === 4) {\n      rule._startTime.setUTCHours(0);\n\n      this._hour(options.date, rule);\n    }\n  };\n\n  return HourlyFrequency;\n}(BaseFrequency);\n\nexport { HourlyFrequency };\n/** @hidden */\n\nvar DailyFrequency =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DailyFrequency, _super);\n\n  function DailyFrequency() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DailyFrequency.prototype.next = function (date, rule) {\n    if (!BaseFrequency.prototype.next.call(this, date, rule)) {\n      this[rule.byHour ? '_hour' : '_date'](date, rule, 1);\n    }\n\n    return false;\n  };\n\n  return DailyFrequency;\n}(BaseFrequency);\n\nexport { DailyFrequency };\n/** @hidden */\n\nvar WeeklyFrequency =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(WeeklyFrequency, _super);\n\n  function WeeklyFrequency() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WeeklyFrequency.prototype.setup = function (rule, eventStartDate) {\n    if (!rule.byWeekDay) {\n      rule.byWeekDay = [{\n        day: eventStartDate.getUTCDay(),\n        offset: 0\n      }];\n    }\n  };\n\n  return WeeklyFrequency;\n}(DailyFrequency);\n\nexport { WeeklyFrequency };\n/** @hidden */\n\nvar MonthlyFrequency =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MonthlyFrequency, _super);\n\n  function MonthlyFrequency() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MonthlyFrequency.prototype.next = function (date, rule) {\n    var day;\n\n    if (!BaseFrequency.prototype.next.call(this, date, rule)) {\n      if (rule.byHour) {\n        this._hour(date, rule, 1);\n      } else if (rule.byMonthDay || rule.byWeekDay || rule.byYearDay || rule.byWeekNumber) {\n        this._date(date, rule, 1);\n      } else {\n        day = date.getUTCDate();\n        date.setUTCMonth(date.getUTCMonth() + 1);\n\n        while (date.getUTCDate() !== day) {\n          date.setUTCDate(day);\n        }\n\n        this._hour(date, rule);\n      }\n    }\n\n    return false;\n  };\n\n  MonthlyFrequency.prototype.normalize = function (options) {\n    var rule = options.rule,\n        date = options.date;\n\n    if (options.idx === 0 && !rule.byMonthDay && !rule.byWeekDay) {\n      date.setUTCDate(options.day);\n    } else {\n      _super.prototype.normalize.call(this, options);\n    }\n  };\n\n  MonthlyFrequency.prototype.setup = function (rule, eventStartDate, date) {\n    if (!rule.byMonthDay && !rule.byWeekDay) {\n      date.setUTCDate(eventStartDate.getUTCDate());\n    }\n  };\n\n  return MonthlyFrequency;\n}(BaseFrequency);\n\nexport { MonthlyFrequency };\n/** @hidden */\n\nvar YearlyFrequency =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(YearlyFrequency, _super);\n\n  function YearlyFrequency() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  YearlyFrequency.prototype.next = function (date, rule) {\n    var day;\n\n    if (!BaseFrequency.prototype.next.call(this, date, rule)) {\n      if (rule.byHour) {\n        this._hour(date, rule, 1);\n      } else if (rule.byMonthDay || rule.byWeekDay || rule.byYearDay || rule.byWeekNumber) {\n        this._date(date, rule, 1);\n      } else if (rule.byMonth) {\n        day = date.getUTCDate();\n        date.setUTCMonth(date.getUTCMonth() + 1);\n\n        while (date.getUTCDate() !== day) {\n          date.setUTCDate(day);\n        }\n\n        this._hour(date, rule);\n      } else {\n        date.setUTCFullYear(date.getUTCFullYear() + 1);\n\n        this._hour(date, rule);\n      }\n    }\n\n    return false;\n  };\n\n  YearlyFrequency.prototype.setup = function () {// No-op\n  };\n\n  return YearlyFrequency;\n}(MonthlyFrequency);\n\nexport { YearlyFrequency };","map":null,"metadata":{},"sourceType":"module"}