{"ast":null,"code":"import * as React from 'react';\nimport { SchedulerResourceContext } from '../../context/SchedulerResourceContext';\nimport { toGroupResources } from './utils';\n/** @hidden */\n\nexport var VerticalResourceIterator = function (props) {\n  var nested = props.nested,\n      wrapGroup = props.wrapGroup,\n      children = props.children;\n  var cellContent = props.cellContent || DefaultCellContent;\n  var resources = toGroupResources(props.group, props.resources);\n  var depth = 0;\n  var groupIndex = 0;\n  return React.createElement(\"div\", {\n    className: \"k-scheduler-group\"\n  }, nested ? wrapGroup ? React.createElement(\"div\", {\n    className: \"k-scheduler-row\"\n  }, React.createElement(\"div\", {\n    className: \"k-sticky-cell\"\n  }, renderResourcesRecursivelyWrapped({\n    resources: resources,\n    children: children,\n    cellContent: cellContent,\n    depth: depth,\n    groupIndex: groupIndex\n  })), React.createElement(\"div\", {\n    className: \"k-scheduler-cell k-group-content\"\n  }, renderResourcesRecursively({\n    resources: resources,\n    children: children,\n    cellContent: cellContent,\n    depth: depth,\n    groupIndex: groupIndex\n  }, false))) : renderResourcesRecursively({\n    resources: resources,\n    children: children,\n    cellContent: cellContent,\n    depth: depth,\n    groupIndex: groupIndex\n  }, true) : wrapGroup ? React.createElement(\"div\", {\n    className: \"k-scheduler-row\"\n  }, React.createElement(\"div\", {\n    className: \"k-sticky-cell\"\n  }, renderResourcesWrapped({\n    resources: resources,\n    children: children,\n    cellContent: cellContent,\n    depth: depth,\n    groupIndex: groupIndex\n  })), React.createElement(\"div\", {\n    className: \"k-scheduler-cell k-group-content\"\n  }, children)) : renderResources({\n    resources: resources,\n    children: children,\n    cellContent: cellContent,\n    depth: depth,\n    groupIndex: groupIndex\n  }));\n};\n\nvar renderResourcesWrapped = function (args) {\n  return React.createElement(\"div\", {\n    className: \"k-scheduler-row\"\n  }, React.createElement(\"div\", {\n    className: \"k-scheduler-row\"\n  }, args.resources.map(function (_, index) {\n    return React.createElement(\"div\", {\n      key: index,\n      className: \"k-scheduler-cell k-resource-cell k-heading-cell\",\n      \"data-depth-index\": index\n    });\n  })));\n};\n\nvar renderResourcesRecursively = function (args, headers) {\n  if (headers === void 0) {\n    headers = true;\n  }\n\n  var resources = args.resources,\n      children = args.children,\n      cellContent = args.cellContent,\n      groupIndex = args.groupIndex,\n      depth = args.depth;\n  var hasGroups = resources.length > 0;\n\n  if (depth === resources.length || !hasGroups) {\n    return React.createElement(SchedulerResourceContext.Provider, {\n      value: {\n        resource: resources[depth],\n        groupIndex: hasGroups ? groupIndex : undefined\n      }\n    }, children);\n  }\n\n  var dataLength = resources[depth].data.length;\n  return resources[depth].data.map(function (dataItem, dataIndex) {\n    return React.createElement(\"div\", {\n      key: dataIndex,\n      className: \"k-scheduler-row\"\n    }, headers && React.createElement(\"div\", {\n      className: \"k-scheduler-cell k-group-cell k-heading-cell\",\n      \"data-depth-index\": depth\n    }, dataItem.text), React.createElement(\"div\", {\n      className: \"k-scheduler-cell k-group-content k-resource-row\",\n      \"data-depth-index\": depth,\n      \"data-resource-index\": dataLength * groupIndex + dataIndex\n    }, renderResourcesRecursively({\n      resources: resources,\n      children: children,\n      cellContent: cellContent,\n      groupIndex: dataLength * groupIndex + dataIndex,\n      depth: depth + 1\n    }, headers)));\n  });\n};\n\nvar renderResourcesRecursivelyWrapped = function (args) {\n  var resources = args.resources,\n      children = args.children,\n      cellContent = args.cellContent,\n      groupIndex = args.groupIndex,\n      depth = args.depth;\n  var dataLength = resources.length ? resources[depth].data.length : 0;\n\n  if (!resources[depth]) {\n    return null;\n  }\n\n  return resources[depth].data.map(function (dataItem, dataIndex) {\n    return React.createElement(\"div\", {\n      key: dataIndex,\n      className: \"k-scheduler-row\"\n    }, React.createElement(\"div\", {\n      className: \"k-scheduler-cell k-resource-cell k-resource-row k-heading-cell\",\n      \"data-depth-index\": depth,\n      \"data-resource-index\": dataLength * groupIndex + dataIndex\n    }, dataItem.text), depth + 1 !== resources.length && React.createElement(\"div\", {\n      className: \"k-scheduler-cell k-resource-content\"\n    }, renderResourcesRecursivelyWrapped({\n      resources: resources,\n      children: children,\n      cellContent: cellContent,\n      groupIndex: dataLength * groupIndex + dataIndex,\n      depth: depth + 1\n    })));\n  });\n};\n\nvar renderGroupContentRecursively = function (args) {\n  var resources = args.resources,\n      children = args.children,\n      cellContent = args.cellContent,\n      groupIndex = args.groupIndex,\n      depth = args.depth;\n  var hasGroups = resources.length > 0;\n\n  if (depth === resources.length || !hasGroups) {\n    return React.createElement(SchedulerResourceContext.Provider, {\n      value: {\n        resource: resources[depth],\n        groupIndex: hasGroups ? groupIndex : undefined\n      }\n    }, children);\n  }\n\n  var dataLength = resources[depth].data.length;\n  return resources[depth].data.map(function (_dataItem, dataIndex) {\n    return React.createElement(\"div\", {\n      key: dataIndex,\n      className: \"k-scheduler-row\"\n    }, React.createElement(\"div\", {\n      className: \"k-scheduler-cell k-group-content\"\n    }, renderGroupContentRecursively({\n      resources: resources,\n      children: children,\n      cellContent: cellContent,\n      groupIndex: dataLength * groupIndex + dataIndex,\n      depth: depth + 1\n    })));\n  });\n};\n\nvar renderResources = function (args) {\n  var resources = args.resources,\n      children = args.children,\n      groupIndex = args.groupIndex,\n      cellContent = args.cellContent;\n  return React.createElement(\"div\", {\n    className: \"k-scheduler-row\"\n  }, cellPrefix(resources), cellContent, cellChildren(children, resources, groupIndex));\n};\n\nvar cellChildren = function (children, resources, groupIndex) {\n  var hasGroups = resources.length > 0;\n  return React.createElement(\"div\", {\n    className: \"k-scheduler-cell k-group-content\"\n  }, React.createElement(SchedulerResourceContext.Provider, {\n    value: {\n      resource: resources[groupIndex],\n      groupIndex: hasGroups ? groupIndex : undefined\n    }\n  }, children));\n};\n\nvar cellPrefix = function (resources) {\n  return resources.map(function (_, index) {\n    return React.createElement(\"div\", {\n      key: index,\n      className: \"k-scheduler-cell k-group-cell k-heading-cell\",\n      \"data-depth-index\": index\n    });\n  });\n};\n\nVerticalResourceIterator.displayName = 'KendoReactSchedulerVerticalResourceIterator';\nvar DefaultCellContent = null;","map":null,"metadata":{},"sourceType":"module"}