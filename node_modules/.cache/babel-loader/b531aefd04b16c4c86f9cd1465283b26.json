{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { NumericTextBox } from '@progress/kendo-react-inputs';\nimport { DropDownList } from '@progress/kendo-react-dropdowns';\nimport { isPresent } from '../../utils';\nvar RADIO_ATTRIBUTES = {\n  type: 'radio',\n  name: 'day',\n  className: 'k-radio'\n};\nvar DEFAULT_OFFSET = 1;\n\nvar getOffset = function (rrule) {\n  if (isPresent(rrule.byWeekDay)) {\n    var weekDaysCount = rrule.byWeekDay.length;\n\n    switch (weekDaysCount) {\n      case 7:\n      case 5:\n      case 2:\n        return rrule.bySetPosition[0];\n\n      case 1:\n        return rrule.byWeekDay[0].offset;\n\n      default:\n        break;\n    }\n  }\n\n  return DEFAULT_OFFSET;\n};\n\nvar getWeekDay = function (rrule, start) {\n  if (isPresent(rrule.byWeekDay)) {\n    var weekDaysCount = rrule.byWeekDay.length;\n\n    switch (weekDaysCount) {\n      case 7:\n        return 'day';\n\n      case 5:\n        return 'weekday';\n\n      case 2:\n        return 'weekend';\n\n      case 1:\n        return rrule.byWeekDay[0].day;\n\n      default:\n        break;\n    }\n  }\n\n  return start.getDay();\n};\n/** @hidden */\n\n\nexport var RecurrenceRepeatOnMonthYearEditor = function (props) {\n  var titleMonthly = props.titleMonthly,\n      titleYearly = props.titleYearly,\n      titleClassName = props.titleClassName,\n      editorClassName = props.editorClassName,\n      monthlyDayTitle = props.monthlyDayTitle,\n      start = props.start,\n      repeatOnRule = props.repeatOnRule,\n      frequency = props.frequency,\n      rrule = props.rrule,\n      months = props.months,\n      offsetPositions = props.offsetPositions,\n      extendedWeekDays = props.extendedWeekDays,\n      yearlyOf = props.yearlyOf,\n      onRepeatOnRuleChange = props.onRepeatOnRuleChange,\n      onMonthDaysChange = props.onMonthDaysChange,\n      onMonthsChange = props.onMonthsChange,\n      onOffsetPositionChange = props.onOffsetPositionChange,\n      onWeekDayChange = props.onWeekDayChange;\n  var month = frequency === 'yearly' && rrule.byMonth ? months.find(function (item) {\n    return rrule.byMonth[0] === item.value;\n  }) : null;\n  var offset = getOffset(rrule);\n  var currentOffset = offsetPositions.find(function (item) {\n    return offset === item.value;\n  });\n  var weekDay = getWeekDay(rrule, start);\n  var currentWeekDay = extendedWeekDays.find(function (item) {\n    return item.value === weekDay;\n  });\n  var isDisabled = React.useCallback(function (currentRepeatOnRule) {\n    return repeatOnRule !== currentRepeatOnRule;\n  }, [repeatOnRule]);\n  var onRepeatOnRuleChangeHandler = React.useCallback(function (e) {\n    onRepeatOnRuleChange(e.target.value, weekDay, offset);\n  }, [onRepeatOnRuleChange]);\n  var onMonthDaysChangeHandler = React.useCallback(function (e) {\n    onMonthDaysChange([e.value]);\n  }, [onMonthDaysChange]);\n  var onMonthsChangeHandler = React.useCallback(function (e) {\n    var selectedMonth = e.target.value;\n    var valueField = e.target.props.dataItemKey;\n    onMonthsChange([selectedMonth[valueField]]);\n  }, [onMonthsChange]);\n  var onOffsetPositionChangeHandler = React.useCallback(function (e) {\n    var selectedOffsetPostion = e.target.value;\n    var valueField = e.target.props.dataItemKey;\n    onOffsetPositionChange(selectedOffsetPostion[valueField]);\n  }, [onOffsetPositionChange]);\n  var onWeekDayChangeHandler = React.useCallback(function (e) {\n    var selectedWeekDay = e.target.value;\n    var valueField = e.target.props.dataItemKey;\n    onWeekDayChange(selectedWeekDay[valueField], offset);\n  }, [onWeekDayChange]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: titleClassName\n  }, frequency === 'yearly' ? titleYearly : titleMonthly), React.createElement(\"div\", {\n    className: editorClassName\n  }, React.createElement(\"ul\", {\n    className: 'k-reset'\n  }, React.createElement(\"li\", null, React.createElement(\"input\", __assign({}, RADIO_ATTRIBUTES, {\n    checked: repeatOnRule === 'monthday',\n    id: 'k-repeaton-monthday',\n    onChange: onRepeatOnRuleChangeHandler,\n    value: 'monthday'\n  })), React.createElement(\"label\", {\n    className: 'k-radio-label',\n    htmlFor: 'k-repeaton-monthday'\n  }, frequency === 'monthly' && monthlyDayTitle), frequency === 'yearly' && React.createElement(React.Fragment, null, React.createElement(DropDownList, {\n    textField: 'text',\n    dataItemKey: 'value',\n    data: months,\n    style: {\n      width: 'auto'\n    },\n    value: month,\n    onChange: onMonthsChangeHandler,\n    disabled: isDisabled('monthday')\n  }), \"\\u00A0\"), React.createElement(NumericTextBox, {\n    width: 'auto',\n    min: 1,\n    max: 31,\n    disabled: isDisabled('monthday'),\n    value: props.monthDay,\n    onChange: onMonthDaysChangeHandler\n  })), React.createElement(\"li\", null, React.createElement(\"input\", __assign({}, RADIO_ATTRIBUTES, {\n    checked: repeatOnRule === 'weekday',\n    id: 'k-repeaton-weekday',\n    onChange: onRepeatOnRuleChangeHandler,\n    value: 'weekday'\n  })), React.createElement(\"label\", {\n    className: 'k-radio-label',\n    htmlFor: 'k-repeaton-weekday'\n  }), React.createElement(DropDownList, {\n    textField: 'text',\n    dataItemKey: 'value',\n    data: offsetPositions,\n    style: {\n      width: 'auto'\n    },\n    value: currentOffset,\n    onChange: onOffsetPositionChangeHandler,\n    disabled: isDisabled('weekday')\n  }), \"\\u00A0\", React.createElement(DropDownList, {\n    textField: 'text',\n    dataItemKey: 'value',\n    data: extendedWeekDays,\n    style: {\n      width: 'auto'\n    },\n    value: currentWeekDay,\n    disabled: isDisabled('weekday'),\n    onChange: onWeekDayChangeHandler\n  }), \"\\u00A0\", frequency === 'yearly' && React.createElement(\"span\", null, yearlyOf, \"\\u00A0\"), frequency === 'yearly' && React.createElement(DropDownList, {\n    textField: 'text',\n    dataItemKey: 'value',\n    data: months,\n    style: {\n      width: 'auto'\n    },\n    value: month,\n    disabled: isDisabled('weekday'),\n    onChange: onMonthsChangeHandler\n  })))));\n};","map":null,"metadata":{},"sourceType":"module"}