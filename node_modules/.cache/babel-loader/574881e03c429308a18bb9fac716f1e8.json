{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Day, addDays } from '@progress/kendo-date-math';\nimport { BaseView } from '../../components/BaseView';\nimport { SchedulerContext } from '../../context';\nimport { WorkHoursFooter } from '../common/WorkHoursFooter';\nimport { HorizontalResourceIterator } from '../common/HorizontalResourceIterator';\nimport { DayViewGroupRowContent } from './DayViewGroupRowContent';\nimport { VerticalResourceIterator } from '../common/VerticalResourceIterator';\nimport { DayViewAllDayRowContent } from './DayViewAllDayRowContent';\nimport { DayViewRowContent } from './DayViewRowContent';\nimport { useDayDateRange } from './hooks';\nimport { DayViewSlot } from './DayViewSlot';\nimport { SchedulerResourceContext } from '../../context/SchedulerResourceContext';\nimport { useWorkHours } from '../common/hooks';\nimport { classNames } from '@progress/kendo-react-common';\nimport { toDayRanges, toDaySlots, toTimeSlots, toDayItems, toTimeItems } from '../../services';\nimport { toSchedulerItems, mapItemsToSlots, mapSlotsToItems } from '../../utils';\nimport { DayViewItem } from './DayViewItem';\nimport { TimeViewSlot } from '../time/TimeViewSlot';\nimport { TimeViewItem } from '../time/TimeViewItem';\nvar DATE_FORMAT = {\n  skeleton: 'MEd'\n};\nvar FIRST_INDEX = 0;\nvar EMPTY_CELL = React.createElement(\"div\", {\n  className: \"k-scheduler-cell k-side-cell\"\n});\n/**\n * @hidden\n */\n\nexport var MultiDayView = function (props) {\n  var _a = React.useContext(SchedulerContext),\n      height = _a.height,\n      intl = _a.intl,\n      group = _a.group,\n      onDateChange = _a.onDateChange,\n      date = _a.date,\n      data = _a.data,\n      fields = _a.fields,\n      resources = _a.resources,\n      timezone = _a.timezone;\n\n  var dateRange = useDayDateRange(props.selectedDateFormat, props.selectedShortDateFormat, props.numberOfDays, props.dateRange);\n\n  var _b = useWorkHours(props.showWorkHours, props.defaultShowWorkHours),\n      showWorkHours = _b[0],\n      handleShowWorkHoursChange = _b[1];\n\n  var orientation = group && group.orientation === 'horizontal' ? 'horizontal' : 'vertical';\n  var ranges = React.useMemo(function () {\n    return toDayRanges(dateRange.start, dateRange.end, timezone, {\n      workWeekStart: props.workWeekStart || defaultProps.workWeekStart,\n      workWeekEnd: props.workWeekEnd || defaultProps.workWeekEnd\n    });\n  }, [dateRange.start.getTime(), dateRange.end.getTime(), timezone, props.workWeekStart, props.workWeekEnd]);\n  var daySlots = React.useMemo(function () {\n    return toDaySlots(group, resources, ranges, timezone, {\n      workWeekStart: props.workWeekStart || defaultProps.workWeekStart,\n      workWeekEnd: props.workWeekEnd || defaultProps.workWeekEnd\n    });\n  }, [group, resources, ranges, timezone, props.workWeekStart, props.workWeekEnd]);\n  var timeSlots = React.useMemo(function () {\n    return toTimeSlots(intl, group, resources, ranges, timezone, showWorkHours, {\n      startTime: props.startTime || defaultProps.startTime,\n      endTime: props.endTime || defaultProps.endTime,\n      workDayStart: props.workDayStart || defaultProps.workDayStart,\n      workDayEnd: props.workDayEnd || defaultProps.workDayEnd,\n      workWeekStart: props.workWeekStart || defaultProps.workWeekStart,\n      workWeekEnd: props.workWeekEnd || defaultProps.workWeekEnd,\n      slotDivisions: props.slotDivisions || defaultProps.slotDivisions,\n      slotDuration: props.slotDuration || defaultProps.slotDuration\n    });\n  }, [intl.locale, group, resources, ranges, timezone, showWorkHours, props.startTime, props.endTime, props.slotDivisions, props.slotDuration, props.workDayStart, props.workDayEnd, props.workWeekStart, props.workWeekEnd]);\n  var processedData = React.useMemo(function () {\n    return toSchedulerItems({\n      data: data,\n      fields: fields,\n      timezone: timezone,\n      group: group,\n      dateRange: dateRange,\n      resources: resources\n    });\n  }, [data, fields, timezone, dateRange.start.getTime(), dateRange.end.getTime(), resources]);\n  var dayData = React.useMemo(function () {\n    return processedData.filter(function (item) {\n      return item.isAllDay;\n    });\n  }, [processedData]);\n  var timeData = React.useMemo(function () {\n    return processedData.filter(function (item) {\n      return !item.isAllDay;\n    });\n  }, [processedData]);\n  var dayItems = React.useMemo(function () {\n    return toDayItems({\n      ranges: ranges,\n      timezone: timezone,\n      data: dayData,\n      rangeStart: dateRange.start,\n      rangeEnd: dateRange.end\n    });\n  }, [ranges, timezone, dayData, dateRange.start.getTime(), dateRange.end.getTime()]);\n  var timeItems = React.useMemo(function () {\n    return toTimeItems({\n      ranges: ranges,\n      timezone: timezone,\n      data: timeData,\n      rangeStart: dateRange.start,\n      rangeEnd: dateRange.end\n    });\n  }, [ranges, timezone, timeData, dateRange.start.getTime(), dateRange.end.getTime()]);\n  React.useMemo(function () {\n    return mapItemsToSlots(dayItems, daySlots, false);\n  }, [dayItems, daySlots]);\n  React.useMemo(function () {\n    return mapSlotsToItems(dayItems, daySlots, false);\n  }, [dayItems, daySlots]);\n  React.useMemo(function () {\n    return mapItemsToSlots(timeItems, timeSlots, false);\n  }, [timeItems, timeSlots]);\n  React.useMemo(function () {\n    return mapSlotsToItems(timeItems, timeSlots, false);\n  }, [timeItems, timeSlots]);\n\n  var handleNavigationAction = function (action) {\n    if (!onDateChange) {\n      return;\n    }\n\n    switch (action.type) {\n      case 'next':\n        onDateChange(addDays(date, props.step || defaultProps.step));\n        return;\n\n      case 'prev':\n        onDateChange(addDays(date, -(props.step || defaultProps.step)));\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  var head = React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n    var groupIndex = _a.groupIndex;\n    return React.createElement(\"div\", {\n      className: \"k-scheduler-row\",\n      key: groupIndex\n    }, ranges.map(function (range, rangeIndex) {\n      return React.createElement(\"div\", {\n        key: rangeIndex,\n        className: \"k-scheduler-cell k-heading-cell k-heading-cell\"\n      }, React.createElement(\"span\", {\n        className: \"k-link k-nav-day\"\n      }, intl.formatDate(range.zonedStart, DATE_FORMAT)));\n    }));\n  });\n  var allDaySlots = React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n    var groupIndex = _a.groupIndex;\n    return React.createElement(\"div\", {\n      key: groupIndex,\n      className: \"k-scheduler-row\"\n    }, ranges.map(function (_, rangeIndex) {\n      return daySlots.filter(function (s) {\n        return s.groupIndex === groupIndex && s.rangeIndex === rangeIndex;\n      }).map(function (slot) {\n        return React.createElement(DayViewSlot, __assign({}, slot, {\n          key: slot.index,\n          expandable: true\n        }));\n      });\n    }));\n  });\n  return React.createElement(BaseView, {\n    ranges: ranges,\n    slots: daySlots.concat(timeSlots),\n    dateRange: dateRange,\n    onNavigationAction: handleNavigationAction\n  }, React.createElement(\"div\", {\n    id: props.id,\n    style: __assign({\n      height: height\n    }, props.style),\n    className: classNames('k-scheduler-layout k-scheduler-layout-flex k-scheduler-day-view', props.className)\n  }, React.createElement(\"div\", {\n    className: \"k-scheduler-head\"\n  }, orientation === 'horizontal' ? React.createElement(React.Fragment, null, React.createElement(HorizontalResourceIterator, {\n    nested: true,\n    group: group,\n    resources: resources,\n    rowContent: DayViewGroupRowContent,\n    childRowContent: DayViewGroupRowContent\n  }, head), React.createElement(HorizontalResourceIterator, {\n    group: group,\n    resources: resources,\n    rowContent: DayViewAllDayRowContent,\n    childRowContent: DayViewAllDayRowContent\n  }, allDaySlots), dayItems.map(function (item) {\n    return React.createElement(DayViewItem, __assign({\n      key: item.occurrenceId !== undefined ? item.id + \"-\" + item.occurrenceId : \"\" + item.id\n    }, item, {\n      editable: props.editable,\n      vertical: false\n    }));\n  })) : React.createElement(VerticalResourceIterator, {\n    group: group,\n    resources: resources,\n    cellContent: EMPTY_CELL\n  }, head)), React.createElement(\"div\", {\n    className: \"k-scheduler-body\"\n  }, orientation === 'horizontal' ? timeSlots.filter(function (slot) {\n    return slot.groupIndex === FIRST_INDEX && slot.rangeIndex === FIRST_INDEX;\n  }).map(function (root) {\n    return React.createElement(HorizontalResourceIterator, {\n      nested: false,\n      key: root.index,\n      group: group,\n      resources: resources,\n      rowContent: DayViewRowContent,\n      rowContentProps: {\n        slot: root\n      }\n    }, React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n      var groupIndex = _a.groupIndex;\n      return React.createElement(\"div\", {\n        className: classNames('k-scheduler-row', {\n          'k-middle-row': root.isMajor\n        })\n      }, ranges.map(function (_range, rangeIndex) {\n        return timeSlots.filter(function (s) {\n          return s.index === root.index && s.rangeIndex === rangeIndex && s.groupIndex === groupIndex;\n        }).map(function (slot) {\n          return React.createElement(TimeViewSlot, __assign({\n            key: groupIndex\n          }, slot, {\n            editable: props.editable\n          }));\n        });\n      }));\n    }));\n  }) : React.createElement(React.Fragment, null, React.createElement(VerticalResourceIterator, {\n    nested: true,\n    group: group,\n    resources: resources\n  }, React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n    var groupIndex = _a.groupIndex;\n    return React.createElement(React.Fragment, {\n      key: groupIndex\n    }, React.createElement(\"div\", {\n      className: \"k-scheduler-row\"\n    }, React.createElement(DayViewAllDayRowContent, {\n      groupIndex: groupIndex\n    }, ranges.map(function (_, rangeIndex) {\n      return daySlots.filter(function (s) {\n        return s.groupIndex === groupIndex && s.rangeIndex === rangeIndex;\n      }).map(function (slot, slotIndex) {\n        return React.createElement(DayViewSlot, __assign({}, slot, {\n          key: slotIndex,\n          className: 'k-scheduler-alldays-slot',\n          expandable: true\n        }));\n      });\n    }))), timeSlots.filter(function (s) {\n      return s.groupIndex === groupIndex && s.rangeIndex === FIRST_INDEX;\n    }).map(function (root) {\n      return React.createElement(\"div\", {\n        className: \"k-scheduler-row\",\n        key: root.index\n      }, React.createElement(DayViewRowContent, {\n        slot: root\n      }, ranges.map(function (_, rangeIndex) {\n        return timeSlots.filter(function (s) {\n          return s.index === root.index && s.groupIndex === groupIndex && s.rangeIndex === rangeIndex;\n        }).map(function (slot, slotIndex) {\n          return React.createElement(TimeViewSlot, __assign({}, slot, {\n            key: slotIndex,\n            editable: props.editable\n          }));\n        });\n      })));\n    }));\n  })), dayItems.map(function (item) {\n    return React.createElement(DayViewItem, __assign({\n      key: \"\" + item.id\n    }, item, {\n      editable: props.editable,\n      vertical: false\n    }));\n  })), timeItems.map(function (item) {\n    return React.createElement(TimeViewItem, __assign({\n      key: item.occurrenceId !== undefined ? item.id + \"-\" + item.occurrenceId : \"\" + item.id\n    }, item, {\n      editable: props.editable,\n      vertical: true\n    }));\n  }))), React.createElement(WorkHoursFooter, {\n    showWorkHours: showWorkHours,\n    onItemClick: handleShowWorkHoursChange\n  }));\n};\nvar defaultProps = {\n  name: 'multi-day',\n  title: 'Multi Day',\n  selectedDateFormat: '{0:D} - {1:D}',\n  selectedShortDateFormat: '{0:d} - {1:d}',\n  numberOfDays: 1,\n  startTime: '00:00',\n  endTime: '00:00',\n  workDayStart: '08:00',\n  workDayEnd: '17:00',\n  workWeekStart: Day.Monday,\n  workWeekEnd: Day.Friday,\n  step: 1,\n  slotDivisions: 2,\n  slotDuration: 60,\n  showCurrentTime: true,\n  defaultShowWorkHours: true\n};\nMultiDayView.propTypes = {\n  name: PropTypes.string,\n  numberOfDays: PropTypes.number,\n  startTime: PropTypes.string,\n  endTime: PropTypes.string,\n  workDayStart: PropTypes.string,\n  workDayEnd: PropTypes.string,\n  workWeekStart: PropTypes.number,\n  workWeekEnd: PropTypes.any,\n  slotDivisions: PropTypes.number,\n  slotDuration: PropTypes.number,\n  showWorkHours: PropTypes.bool,\n  selectedDateFormat: PropTypes.string,\n  selectedShortDateFormat: PropTypes.string\n};\nMultiDayView.defaultProps = defaultProps;\nMultiDayView.displayName = 'KendoReactSchedulerMultiDayView';","map":null,"metadata":{},"sourceType":"module"}