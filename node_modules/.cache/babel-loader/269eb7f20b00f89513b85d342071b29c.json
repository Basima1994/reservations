{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { Form } from '@progress/kendo-react-form';\nimport { clone } from '@progress/kendo-react-common';\nimport { BaseScheduler } from './BaseScheduler';\nimport { messages, editorTitle, editorDelete, deleteDialogTitle, deleteConfirmation, editorSave, editorCancel } from './messages';\nimport { SchedulerEditor } from './editors/SchedulerEditor';\nimport { getModelFields, getField, groupResources, findMaster, isRecurring, isException, setField, isMaster, buildException, extractResourceFields } from './utils';\nimport { OccurrenceDialog } from './components/OccurrenceDialog';\nimport { EDIT_ACTIONS, editReducer, EDIT_INITIAL_STATE } from './reducers';\nimport { DEFAULT_ID } from './constants';\nimport { toFlatGroupResources } from './views/common/utils';\n/**\n * Represents the [KendoReact Scheduler component]({% slug overview_scheduler %})\n */\n\nexport var Scheduler = React.forwardRef(function (props, ref) {\n  var onDataChange = props.onDataChange,\n      onDateChange = props.onDateChange,\n      onViewChange = props.onViewChange,\n      others = __rest(props, [\"onDataChange\", \"onDateChange\", \"onViewChange\"]);\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props\n    };\n  });\n  var fields = React.useMemo(function () {\n    return getModelFields(props.modelFields);\n  }, [props.modelFields]).fields;\n\n  var _a = React.useReducer(editReducer, __assign({}, EDIT_INITIAL_STATE)),\n      edit = _a[0],\n      dispatch = _a[1];\n\n  var localizationService = useLocalization();\n\n  var localizeMessage = function (message) {\n    return localizationService.toLanguageString(message, messages[message]);\n  };\n\n  var editSaveMessage = localizeMessage(editorSave);\n  var editCancelMessage = localizeMessage(editorCancel);\n  var editorTitleMessage = localizeMessage(editorTitle);\n  var editorDeleteMessage = localizeMessage(editorDelete);\n  var deleteDialogTitleMessage = localizeMessage(deleteDialogTitle);\n  var deleteConfirmationMessage = localizeMessage(deleteConfirmation); // 2. Internal event handlers\n\n  var handleDataChange = React.useCallback(function (_a) {\n    var _b = _a.created,\n        created = _b === void 0 ? [] : _b,\n        _c = _a.updated,\n        updated = _c === void 0 ? [] : _c,\n        _d = _a.deleted,\n        deleted = _d === void 0 ? [] : _d;\n\n    if (onDataChange) {\n      var args = {\n        created: created,\n        updated: updated,\n        deleted: deleted\n      };\n      onDataChange.call(undefined, args);\n    }\n  }, [onDataChange, ref]);\n  var handleDateChange = React.useCallback(function (_a) {\n    var value = _a.value;\n\n    if (onDateChange) {\n      var args = {\n        value: value\n      };\n      onDateChange.call(undefined, args);\n    }\n  }, [onDateChange, ref]);\n  var handleViewChange = React.useCallback(function (_a) {\n    var value = _a.value;\n\n    if (onViewChange) {\n      var args = {\n        value: value\n      };\n      onViewChange.call(undefined, args);\n    }\n  }, [onViewChange, ref]);\n  var handleEditOccurrence = React.useCallback(function () {\n    var exceptionItem = buildException(edit.dataItem, fields, props.data || []);\n    dispatch({\n      type: EDIT_ACTIONS.EDIT,\n      payload: exceptionItem\n    });\n  }, [dispatch, edit.dataItem, props.data, fields]);\n  var handleEditSeries = React.useCallback(function () {\n    var masterEvent = findMaster(edit.dataItem, fields, props.data || []) || edit.dataItem;\n    dispatch({\n      type: EDIT_ACTIONS.EDIT,\n      payload: masterEvent\n    });\n  }, [dispatch, edit.dataItem, props.data, fields]);\n  var handleEditDropOccurrence = React.useCallback(function () {\n    var created = [];\n    var updated = [];\n    var deleted = [];\n    var masterClone = clone(findMaster(edit.dataItem, fields, props.data || []));\n    var exceptionDate = getField(edit.dataItem, fields.start);\n    var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];\n    setField(masterClone, fields.recurrenceExceptions, currentExceptions.concat([exceptionDate]));\n    setField(edit.drop, fields.recurrenceRule, undefined);\n    updated.push(masterClone);\n    created.push(edit.drop);\n    handleDataChange({\n      created: created,\n      updated: updated,\n      deleted: deleted\n    });\n    dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  }, [dispatch, edit.dataItem, edit.drop, props.data, handleDataChange, fields]);\n  var handleEditDropSeries = React.useCallback(function () {\n    var id = getField(edit.dataItem, fields.recurrenceId);\n    var masterItem = clone(findMaster(edit.dataItem, fields, props.data || []));\n    var deleted = (props.data || []).filter(function (i) {\n      return getField(i, fields.recurrenceId) === id && !getField(i, fields.recurrenceRule);\n    }).map(function (i) {\n      return clone(i);\n    });\n    setField(masterItem, fields.recurrenceExceptions, []);\n    setField(masterItem, fields.start, getField(edit.drop, fields.start));\n    setField(masterItem, fields.end, getField(edit.drop, fields.end));\n    var resourceFields = extractResourceFields(edit.drop, fields, props.resources);\n    Object.keys(resourceFields).forEach(function (key) {\n      if (resourceFields.hasOwnProperty(key)) {\n        setField(masterItem, fields[key] || key, resourceFields[key]);\n      }\n    });\n    var updated = [masterItem];\n    handleDataChange({\n      deleted: deleted,\n      updated: updated\n    });\n    dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  }, [dispatch, handleDataChange, edit.dataItem, fields, props.data, edit.drop, props.resources]);\n  var handleRemoveSeriesConfirm = React.useCallback(function () {\n    var masterEvent = findMaster(edit.dataItem, fields, props.data || []);\n    var id = getField(masterEvent, fields.id);\n    var deleted = (props.data || []). // Optional for server expanded items\n    filter(function (ev) {\n      return getField(ev, fields.recurrenceId) === id || getField(ev, fields.id) === id;\n    }).map(function (ev) {\n      return clone(ev);\n    });\n    handleDataChange({\n      deleted: deleted\n    });\n    dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  }, [dispatch, handleDataChange, edit.dataItem, fields, props.data]);\n  var handleRemoveOccurrenceConfirm = React.useCallback(function () {\n    if (!edit.dataItem) {\n      return;\n    }\n\n    var masterClone = clone(findMaster(edit.dataItem, fields, props.data || []));\n    var exceptionDate = getField(edit.dataItem, fields.start);\n    var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];\n    setField(masterClone, fields.recurrenceExceptions, currentExceptions.concat([exceptionDate]));\n    var updated = [masterClone];\n    handleDataChange({\n      updated: updated\n    });\n    dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  }, [dispatch, handleDataChange, edit.dataItem, fields, props.data]);\n  var handleRemoveConfirm = React.useCallback(function () {\n    var updated = [];\n    var deleted = [edit.dataItem];\n\n    if (isException(edit.dataItem, fields)) {\n      var masterClone = clone(findMaster(edit.dataItem, fields, props.data || []));\n      var exceptionDate_1 = getField(edit.dataItem, fields.start);\n      var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];\n      setField(masterClone, fields.recurrenceExceptions, currentExceptions.filter(function (exception) {\n        return exception !== exceptionDate_1;\n      }));\n      updated.push(masterClone);\n    }\n\n    handleDataChange({\n      deleted: deleted\n    });\n    dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  }, [dispatch, handleDataChange, edit.dataItem, fields, props.data]);\n\n  var handleCancel = function () {\n    return dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  };\n\n  var handleEditComplete = React.useCallback(function (dataItem) {\n    var created = [];\n    var updated = [];\n    var deleted = [];\n    var isNew = getField(dataItem, fields.id) === DEFAULT_ID;\n\n    if (isNew) {\n      // 1. Create\n      if (isException(dataItem, fields)) {\n        // 5. Edit occurrence\n        var masterClone = clone(findMaster(edit.dataItem, fields, props.data || []));\n        var exceptionDate = getField(edit.dataItem, fields.start);\n        var currentExceptions = getField(masterClone, fields.recurrenceExceptions) || [];\n        setField(masterClone, fields.recurrenceExceptions, currentExceptions.concat([exceptionDate]));\n        updated.push(masterClone);\n      }\n\n      created.push(dataItem);\n    } else {\n      // 2. Edit regular event\n      // 3. Edit old exception\n      if (isMaster(dataItem, fields)) {\n        // 4. Edit series\n        var id_1 = getField(edit.dataItem, fields.id);\n        (props.data || []).forEach(function (ev) {\n          if (getField(ev, fields.recurrenceId) === id_1) {\n            // Optional for server expanded items\n            deleted.push(clone(ev));\n          }\n        });\n        setField(dataItem, fields.recurrenceExceptions, []);\n      }\n\n      updated.push(dataItem);\n    }\n\n    handleDataChange({\n      created: created,\n      updated: updated,\n      deleted: deleted\n    });\n    dispatch({\n      type: EDIT_ACTIONS.RESET\n    });\n  }, [dispatch, handleDataChange, fields, props.data, edit.dataItem]);\n  /*\n      Edit cases:\n      1. Create\n      2. Edit regular event\n      3. Edit old exception\n      4. Edit series\n      5. Edit occurrence\n       Remove cases:\n      1. Remove regular\n      2. Remove exception\n      3. Remove series\n      4. Remove occurrence\n  */\n  // 1. Scheduler event handlers\n  // 1.1 SchedulerSlot events\n\n  var handleSlotClick = React.useCallback(function (_event) {}, []);\n  var handleSlotDoubleClick = React.useCallback(function (_a) {\n    var slot = _a.slot;\n    var dataItem = {};\n    setField(dataItem, fields.start, new Date(slot.start.getTime()));\n    setField(dataItem, fields.end, new Date(slot.end.getTime()));\n    setField(dataItem, fields.isAllDay, slot.isAllDay);\n\n    if (slot.groupIndex !== undefined) {\n      var groupedResources = groupResources(props.group, props.resources || []);\n      var flatResources = toFlatGroupResources(groupedResources);\n      var slotResources = flatResources[slot.groupIndex];\n\n      for (var idx = 0; idx < slotResources.length; idx++) {\n        var resource = slotResources[idx];\n        var value = getField(slotResources[idx], resource.valueField);\n        setField(dataItem, resource.field, resource.multiple ? [value] : value);\n      }\n    }\n\n    dispatch({\n      type: EDIT_ACTIONS.CREATE,\n      payload: dataItem\n    });\n  }, [fields, props.group, props.resources, dispatch]); // 1.2 SchedulerItem events\n\n  var handleItemClick = React.useCallback(function (_event) {}, []);\n  var handleItemDoubleClick = React.useCallback(function (_a) {\n    var dataItem = _a.dataItem;\n    var occurrence = isRecurring(dataItem, fields) && !isException(dataItem, fields);\n\n    if (occurrence) {\n      dispatch({\n        type: EDIT_ACTIONS.EDIT_OCCURRENCE,\n        payload: dataItem\n      });\n    } else {\n      dispatch({\n        type: EDIT_ACTIONS.EDIT,\n        payload: dataItem\n      });\n    }\n  }, [dispatch, fields]);\n  var handleItemRemoveClick = React.useCallback(function (_a) {\n    var dataItem = _a.dataItem;\n    var occurrence = isRecurring(dataItem, fields) && !isException(dataItem, fields);\n\n    if (occurrence) {\n      dispatch({\n        type: EDIT_ACTIONS.REMOVE_OCCURRENCE,\n        payload: dataItem\n      });\n    } else {\n      dispatch({\n        type: EDIT_ACTIONS.REMOVE,\n        payload: dataItem\n      });\n    }\n  }, [dispatch, fields]);\n  var handleItemDrop = React.useCallback(function (_a) {\n    var dataItem = _a.dataItem,\n        original = _a.original;\n    var occurrence = isRecurring(dataItem, fields) && !isException(dataItem, fields);\n\n    if (occurrence) {\n      dispatch({\n        type: EDIT_ACTIONS.EDIT_DROP_OCCURRENCE,\n        payload: dataItem,\n        original: original\n      });\n    } else {\n      handleEditComplete(dataItem);\n      dispatch({\n        type: EDIT_ACTIONS.RESET\n      });\n    }\n  }, [dispatch, handleEditComplete]);\n  return React.createElement(React.Fragment, null, React.createElement(BaseScheduler, __assign({\n    onDateChange: handleDateChange,\n    onViewChange: handleViewChange,\n    onSlotClick: handleSlotClick,\n    onSlotDoubleClick: handleSlotDoubleClick,\n    onItemDrop: handleItemDrop,\n    onItemClick: handleItemClick,\n    onItemDoubleClick: handleItemDoubleClick,\n    onItemRemoveClick: handleItemRemoveClick\n  }, others)), !edit.drop && edit.editDialog && React.createElement(Form, {\n    initialValues: edit.dataItem,\n    onSubmit: handleEditComplete,\n    render: function (renderProps) {\n      return React.createElement(Dialog, {\n        title: editorTitleMessage,\n        minWidth: 600,\n        onClose: handleCancel,\n        className: \"k-scheduler-edit-dialog\"\n      }, React.createElement(SchedulerEditor, __assign({}, renderProps, {\n        resources: props.resources,\n        timezone: props.timezone,\n        fields: fields,\n        onCancel: handleCancel\n      })), React.createElement(DialogActionsBar, null, React.createElement(\"button\", {\n        className: \"k-button\",\n        disabled: !renderProps.allowSubmit,\n        onClick: renderProps.onSubmit\n      }, editSaveMessage), React.createElement(\"button\", {\n        className: \"k-button\",\n        onClick: handleCancel\n      }, editCancelMessage)));\n    }\n  }), edit.drop && edit.occurrenceDialog && React.createElement(OccurrenceDialog, {\n    isRemove: false,\n    onCancelClick: handleCancel,\n    onOccurrenceClick: handleEditDropOccurrence,\n    onSeriesClick: handleEditDropSeries\n  }), !edit.drop && (edit.removeOccurrenceDialog || edit.occurrenceDialog) && React.createElement(OccurrenceDialog, {\n    isRemove: edit.removeOccurrenceDialog,\n    onCancelClick: handleCancel,\n    onOccurrenceClick: edit.removeOccurrenceDialog ? handleRemoveOccurrenceConfirm : handleEditOccurrence,\n    onSeriesClick: edit.removeOccurrenceDialog ? handleRemoveSeriesConfirm : handleEditSeries\n  }), edit.removeDialog && React.createElement(Dialog, {\n    title: deleteDialogTitleMessage,\n    onClose: handleCancel\n  }, deleteConfirmationMessage, React.createElement(DialogActionsBar, null, React.createElement(\"button\", {\n    className: \"k-button\",\n    onClick: handleCancel\n  }, editCancelMessage), React.createElement(\"button\", {\n    className: \"k-button\",\n    onClick: handleRemoveConfirm\n  }, editorDeleteMessage))));\n});\nvar defaultProps = {\n  data: []\n};\nScheduler.propTypes = {\n  data: PropTypes.array,\n  editable: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    add: PropTypes.bool,\n    drag: PropTypes.bool,\n    edit: PropTypes.bool,\n    remove: PropTypes.bool,\n    resize: PropTypes.bool\n  })]),\n  view: PropTypes.string,\n  defaultView: PropTypes.string,\n  date: PropTypes.instanceOf(Date),\n  defaultDate: PropTypes.instanceOf(Date),\n  rtl: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.any,\n  timezone: PropTypes.string,\n  group: PropTypes.any,\n  resources: PropTypes.any,\n  modelFields: PropTypes.shape({\n    id: PropTypes.string,\n    start: PropTypes.string,\n    startTimezone: PropTypes.string,\n    end: PropTypes.string,\n    endTimezone: PropTypes.string,\n    isAllDay: PropTypes.string,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    recurrenceRule: PropTypes.string,\n    recurrenceId: PropTypes.string,\n    recurrenceException: PropTypes.string\n  })\n};\nScheduler.displayName = 'KendoReactScheduler';\nScheduler.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}