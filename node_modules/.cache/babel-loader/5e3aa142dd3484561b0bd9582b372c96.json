{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { BaseView } from '../../components/BaseView';\nimport { useCellSync, useRowSync } from '../../hooks';\nimport { Day, addDays } from '@progress/kendo-date-math';\nimport { SchedulerContext } from '../../context';\nimport { WorkHoursFooter } from '../common/WorkHoursFooter';\nimport { useTimeDateRange } from './hooks';\nimport { HorizontalResourceIterator } from '../common/HorizontalResourceIterator';\nimport { SchedulerResourceContext } from '../../context/SchedulerResourceContext';\nimport { TimeViewSlot } from './TimeViewSlot';\nimport { TimelineViewRowContent } from './TimelineViewRowContent';\nimport { TimelineViewAllEventsRowContent } from './TimelineViewAllEventsRowContent';\nimport { TimeViewItem } from './TimeViewItem';\nimport { VerticalResourceIterator } from '../common/VerticalResourceIterator';\nimport { useWorkHours } from '../common/hooks';\nimport { toTimeRanges, toTimeSlots, toTimeItems } from '../../services';\nimport { toSchedulerItems, mapItemsToSlots, mapSlotsToItems } from '../../utils';\nimport { classNames } from '@progress/kendo-react-common';\nvar DATE_FORMAT = 'm';\nvar TIME_FORMAT = 't';\n/**\n * @hidden\n */\n\nexport var MultiDayTimelineView = function (props) {\n  var element = React.useRef(null);\n\n  var _a = React.useContext(SchedulerContext),\n      data = _a.data,\n      fields = _a.fields,\n      intl = _a.intl,\n      timezone = _a.timezone,\n      resources = _a.resources,\n      group = _a.group,\n      date = _a.date,\n      onDateChange = _a.onDateChange,\n      height = _a.height;\n\n  var _b = props.selectedDateFormat,\n      selectedDateFormat = _b === void 0 ? defaultProps.selectedDateFormat : _b,\n      _c = props.selectedShortDateFormat,\n      selectedShortDateFormat = _c === void 0 ? defaultProps.selectedShortDateFormat : _c,\n      _d = props.numberOfDays,\n      numberOfDays = _d === void 0 ? defaultProps.numberOfDays : _d;\n  var dateRange = useTimeDateRange(selectedDateFormat, selectedShortDateFormat, numberOfDays);\n\n  var _e = useWorkHours(props.showWorkHours, props.defaultShowWorkHours),\n      showWorkHours = _e[0],\n      handleShowWorkHoursChange = _e[1];\n\n  var orientation = group && group.orientation === 'horizontal' ? 'horizontal' : 'vertical';\n  var ranges = React.useMemo(function () {\n    return toTimeRanges(dateRange.start, dateRange.end, timezone, {\n      workWeekStart: props.workWeekStart || defaultProps.workWeekStart,\n      workWeekEnd: props.workWeekEnd || defaultProps.workWeekEnd\n    });\n  }, [dateRange.start.getTime(), dateRange.end.getTime(), timezone, props.workWeekStart, props.workWeekEnd]);\n  var slots = React.useMemo(function () {\n    return toTimeSlots(intl, group, resources, ranges, timezone, showWorkHours, {\n      startTime: props.startTime || defaultProps.startTime,\n      endTime: props.endTime || defaultProps.endTime,\n      workDayStart: props.workDayStart || defaultProps.workDayStart,\n      workDayEnd: props.workDayEnd || defaultProps.workDayEnd,\n      workWeekStart: props.workWeekStart || defaultProps.workWeekStart,\n      workWeekEnd: props.workWeekEnd || defaultProps.workWeekEnd,\n      slotDivisions: props.slotDivisions || defaultProps.slotDivisions,\n      slotDuration: props.slotDuration || defaultProps.slotDuration\n    });\n  }, [intl.locale, group, resources, ranges, timezone, showWorkHours, props.startTime, props.endTime, props.slotDivisions, props.slotDuration, props.workDayStart, props.workDayEnd, props.workWeekStart, props.workWeekEnd]);\n  var processedData = React.useMemo(function () {\n    return toSchedulerItems({\n      data: data,\n      fields: fields,\n      timezone: timezone,\n      group: group,\n      dateRange: dateRange,\n      resources: resources\n    });\n  }, [data, fields, timezone, dateRange.start.getTime(), dateRange.end.getTime(), resources]);\n  var items = React.useMemo(function () {\n    return toTimeItems({\n      ranges: ranges,\n      timezone: timezone,\n      data: processedData,\n      rangeStart: dateRange.start,\n      rangeEnd: dateRange.end\n    });\n  }, [ranges, timezone, processedData, dateRange.start.getTime(), dateRange.end.getTime()]);\n  var width = slots.length * (props.columnWidth || defaultProps.columnWidth);\n  React.useMemo(function () {\n    return mapItemsToSlots(items, slots, true);\n  }, [items, slots]);\n  React.useMemo(function () {\n    return mapSlotsToItems(items, slots, true);\n  }, [items, slots]);\n\n  var handleNavigationAction = function (action) {\n    if (!onDateChange) {\n      return;\n    }\n\n    switch (action.type) {\n      case 'next':\n        onDateChange(addDays(date, props.step || defaultProps.step));\n        return;\n\n      case 'prev':\n        onDateChange(addDays(date, -(props.step || defaultProps.step)));\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  useCellSync({\n    element: element,\n    selector: '.k-resource-cell',\n    attribute: 'data-depth-index',\n    explicitDepth: true\n  });\n  useRowSync({\n    element: element,\n    selector: '.k-resource-row',\n    horizontalAttribute: 'data-depth-index',\n    verticalAttribute: 'data-resource-index',\n    applyTo: '.k-resource-cell'\n  });\n  var head = React.createElement(SchedulerResourceContext.Consumer, null, function () {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"k-scheduler-row\"\n    }, ranges.map(function (range, rangeIndex) {\n      return React.createElement(\"div\", {\n        key: rangeIndex,\n        className: \"k-scheduler-cell k-heading-cell\"\n      }, intl.formatDate(range.zonedStart, DATE_FORMAT));\n    })), React.createElement(\"div\", {\n      className: \"k-scheduler-row\"\n    }, ranges.map(function (_, rangeIndex) {\n      return slots.filter(function (s) {\n        return (s.groupIndex === undefined || s.groupIndex === 0) && s.rangeIndex === rangeIndex;\n      }).map(function (slot) {\n        return slot.isMajor ? React.createElement(\"div\", {\n          key: slot.index,\n          className: \"k-scheduler-cell k-heading-cell\"\n        }, intl.formatDate(slot.zonedStart, TIME_FORMAT)) : null;\n      });\n    })));\n  });\n  var body = React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n    var groupIndex = _a.groupIndex;\n    return React.createElement(\"div\", {\n      className: \"k-scheduler-row\"\n    }, ranges.map(function (_, rangeIndex) {\n      return slots.filter(function (s) {\n        return s.groupIndex === groupIndex && s.rangeIndex === rangeIndex;\n      }).map(function (slot) {\n        return React.createElement(TimeViewSlot, __assign({\n          key: slot.index\n        }, slot, {\n          expandable: true,\n          editable: props.editable\n        }));\n      });\n    }));\n  });\n  return React.createElement(BaseView, {\n    dateRange: dateRange,\n    slots: slots,\n    ranges: ranges,\n    onNavigationAction: handleNavigationAction\n  }, React.createElement(\"div\", {\n    ref: element,\n    id: props.id,\n    style: __assign({\n      height: height\n    }, props.style),\n    className: classNames('k-scheduler-layout k-scheduler-layout-flex k-scheduler-timeline-view', props.className)\n  }, React.createElement(\"div\", {\n    className: \"k-scheduler-head\",\n    style: {\n      width: width\n    }\n  }, orientation === 'horizontal' ? React.createElement(HorizontalResourceIterator, {\n    nested: true,\n    group: group,\n    resources: resources,\n    rowContent: TimelineViewRowContent\n  }, head) : React.createElement(VerticalResourceIterator, {\n    wrapGroup: true,\n    group: group,\n    resources: resources\n  }, head)), React.createElement(\"div\", {\n    className: \"k-scheduler-body\",\n    style: {\n      width: width\n    }\n  }, orientation === 'horizontal' ? React.createElement(HorizontalResourceIterator, {\n    group: group,\n    resources: resources,\n    rowContent: TimelineViewAllEventsRowContent\n  }, body) : React.createElement(VerticalResourceIterator, {\n    nested: true,\n    wrapGroup: true,\n    group: group,\n    resources: resources\n  }, body), items.map(function (item) {\n    return React.createElement(TimeViewItem, __assign({\n      key: item.occurrenceId !== undefined ? item.id + \"-\" + item.occurrenceId : \"\" + item.id\n    }, item, {\n      editable: props.editable,\n      vertical: false\n    }));\n  }))), React.createElement(WorkHoursFooter, {\n    showWorkHours: showWorkHours,\n    onItemClick: handleShowWorkHoursChange\n  }));\n};\nvar defaultProps = {\n  name: 'multi-day-timeline',\n  title: 'Multi Day Timeline',\n  selectedDateFormat: '{0:D} - {1:D}',\n  selectedShortDateFormat: '{0:d} - {1:d}',\n  step: 1,\n  numberOfDays: 1,\n  startTime: '00:00',\n  endTime: '00:00',\n  workDayStart: '8:00',\n  workDayEnd: '17:00',\n  workWeekStart: Day.Monday,\n  workWeekEnd: Day.Friday,\n  slotDivisions: 2,\n  slotDuration: 60,\n  // showCurrentTime: true // TODO: Phase 2\n  defaultShowWorkHours: true,\n  columnWidth: 100\n};\nMultiDayTimelineView.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}