{"ast":null,"code":"import * as React from 'react';\nimport { getRect, setRect } from '../../common/utils';\nimport { BORDER_WIDTH } from '../../../constants';\n/** @hidden */\n\nexport var useDayFragmentPosition = function (ref, props, order) {\n  var _a = React.useState(true),\n      fit = _a[0],\n      setFit = _a[1];\n\n  var _b = React.useState(false),\n      show = _b[0],\n      setShow = _b[1];\n\n  var reflow = function () {\n    var element = ref.current;\n\n    if (!element) {\n      return;\n    }\n\n    if (props.slots.length === 0) {\n      setFit(false);\n      return;\n    }\n\n    if (!props.slots[0] || !props.slots[0].ref) {\n      return;\n    }\n\n    var rect = calculateEventRect(props.slots, props.vertical);\n    var ignoreSiblings = props.resizeHint || props.dragHint;\n\n    if (ignoreSiblings) {\n      order = 0;\n    }\n\n    if (rect) {\n      rect.width = props.vertical ? rect.width : rect.width * props.slots.length - BORDER_WIDTH * 2;\n      rect.height = !props.vertical ? ignoreSiblings ? rect.height : 25 : rect.height;\n      rect.left = props.vertical ? rect.left + order * rect.width : rect.left + BORDER_WIDTH;\n      rect.top = !props.vertical ? rect.top + order * (rect.height + BORDER_WIDTH) : rect.top;\n      setRect(element, rect);\n      setFit(true);\n      setShow(true);\n    }\n  };\n\n  var handleResize = function () {\n    if (!window) {\n      return;\n    }\n\n    window.addEventListener('resize', reflow);\n    return function () {\n      return window.removeEventListener('resize', reflow);\n    };\n  };\n\n  React.useEffect(handleResize, []);\n  React.useEffect(reflow);\n  return {\n    show: show,\n    fit: fit\n  };\n};\n\nvar calculateEventRect = function (slots, vertical) {\n  if (slots.length < 1 || !slots[0].ref || !slots[0].ref.current) {\n    return null;\n  }\n\n  var firstSlotRect = getRect(slots[0].ref.current.element);\n  var rect = {\n    top: firstSlotRect.top,\n    left: firstSlotRect.left,\n    width: firstSlotRect.width,\n    height: 0\n  };\n  slots.forEach(function (slot) {\n    if (!slot.ref.current) {\n      return;\n    }\n\n    var height = getRect(slot.ref.current.element).height;\n\n    if (height !== undefined) {\n      if (!vertical && height >= rect.height) {\n        rect.height = height;\n      } else {\n        rect.height += height;\n      }\n    }\n  });\n  return rect;\n};","map":null,"metadata":{},"sourceType":"module"}