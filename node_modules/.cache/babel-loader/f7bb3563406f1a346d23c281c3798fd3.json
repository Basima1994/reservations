{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { isCompositeFilterDescriptor } from './filtering/filter-descriptor.interface';\nimport { compose, ifElse } from './funcs';\nimport { normalizeField, quote, toLower, isDateValue, isStringValue, serializeFilters, encodeValue, toUTC } from './filter-serialization.common';\n\nvar formatDate = function (_a) {\n  var utcDates = _a.utcDates;\n  return function (_a) {\n    var field = _a.field,\n        value = _a.value,\n        ignoreCase = _a.ignoreCase,\n        operator = _a.operator;\n    return {\n      value: JSON.stringify(!utcDates ? toUTC(value) : value).replace(/\"/g, \"\"),\n      field: field,\n      ignoreCase: ignoreCase,\n      operator: operator\n    };\n  };\n};\n\nvar fnFormatter = function (_a) {\n  var operator = _a.operator;\n  return function (_a) {\n    var field = _a.field,\n        value = _a.value;\n    return operator + \"(\" + field + \",\" + value + \")\";\n  };\n};\n\nvar singleOperatorFormatter = function (_a) {\n  var operator = _a.operator;\n  return function (_a) {\n    var field = _a.field,\n        value = _a.value;\n    return field + \" \" + operator + \" \" + value;\n  };\n};\n\nvar stringFormat = function (formatter) {\n  return compose(formatter, encodeValue, quote, toLower, normalizeField);\n};\n\nvar stringFnOperator = function (settings) {\n  return stringFormat(fnFormatter(settings));\n};\n\nvar stringOperator = function (settings) {\n  return stringFormat(singleOperatorFormatter(settings));\n};\n\nvar numericOperator = function (settings) {\n  return compose(singleOperatorFormatter(settings), normalizeField);\n};\n\nvar dateOperator = function (settings) {\n  return compose(singleOperatorFormatter(settings), normalizeField, formatDate(settings));\n};\n\nvar ifDate = function (settings) {\n  return ifElse(isDateValue, dateOperator(settings), numericOperator(settings));\n};\n\nvar typedOperator = function (settings) {\n  return ifElse(isStringValue, stringOperator(settings), ifDate(settings));\n};\n\nvar appendEqual = function (str) {\n  return str + \" eq -1\";\n};\n\nvar nonValueExpression = function (formatter) {\n  return compose(formatter, normalizeField);\n};\n\nvar filterOperators = function (operator, settings) {\n  return {\n    contains: stringFnOperator(tslib_1.__assign({}, settings, {\n      operator: \"contains\"\n    })),\n    doesnotcontain: compose(appendEqual, stringFnOperator(tslib_1.__assign({}, settings, {\n      operator: \"indexof\"\n    }))),\n    endswith: stringFnOperator(tslib_1.__assign({}, settings, {\n      operator: \"endswith\"\n    })),\n    eq: typedOperator(tslib_1.__assign({}, settings, {\n      operator: \"eq\"\n    })),\n    gt: typedOperator(tslib_1.__assign({}, settings, {\n      operator: \"gt\"\n    })),\n    gte: typedOperator(tslib_1.__assign({}, settings, {\n      operator: \"ge\"\n    })),\n    isempty: nonValueExpression(function (_a) {\n      var field = _a.field;\n      return field + \" eq ''\";\n    }),\n    isnotempty: nonValueExpression(function (_a) {\n      var field = _a.field;\n      return field + \" ne ''\";\n    }),\n    isnotnull: nonValueExpression(function (_a) {\n      var field = _a.field;\n      return field + \" ne null\";\n    }),\n    isnull: nonValueExpression(function (_a) {\n      var field = _a.field;\n      return field + \" eq null\";\n    }),\n    lt: typedOperator(tslib_1.__assign({}, settings, {\n      operator: \"lt\"\n    })),\n    lte: typedOperator(tslib_1.__assign({}, settings, {\n      operator: \"le\"\n    })),\n    neq: typedOperator(tslib_1.__assign({}, settings, {\n      operator: \"ne\"\n    })),\n    startswith: stringFnOperator(tslib_1.__assign({}, settings, {\n      operator: \"startswith\"\n    }))\n  }[operator];\n};\n\nvar join = function (x) {\n  return \" \" + x.logic + \" \";\n};\n\nvar serialize = function (settings) {\n  return function (x) {\n    return filterOperators(x.operator, settings)(x);\n  };\n};\n\nvar serializeAll = function (settings) {\n  return serializeFilters(function (filter) {\n    return ifElse(isCompositeFilterDescriptor, serializeAll(settings), serialize(settings))(filter);\n  }, join);\n};\n/**\n * @hidden\n */\n\n\nexport var serializeFilter = function (filter, settings) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  if (filter.filters && filter.filters.length) {\n    return \"$filter=\" + serializeAll(settings)(filter);\n  }\n\n  return \"\";\n};","map":null,"metadata":{},"sourceType":"module"}