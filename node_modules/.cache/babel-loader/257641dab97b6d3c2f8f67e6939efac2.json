{"ast":null,"code":"import * as React from 'react';\nimport { useLocalization } from '@progress/kendo-react-intl';\nimport { Field } from '@progress/kendo-react-form';\nimport { messages, editorEventTitle, editorEventStart, editorEventEnd, editorEventDescription, editorEventAllDay, editorEventTimeZone, editorEventSeparateTimeZones, editorValidationRequired, editorValidationStart, editorValidationEnd } from '../messages';\nimport { Input } from './Input';\nimport { DatePicker } from './DatePicker';\nimport { DateTimePicker } from './DateTimePicker';\nimport { CheckBox } from './CheckBox';\nimport { RecurrenceEditor } from './RecurrenceEditor';\nimport { TextArea } from './TextArea';\nimport { TimezoneEditor } from './TimezoneEditor';\nimport { DropDownList } from './DropDownList';\nimport { MultiSelect } from './MultiSelect';\nimport { labelUserSelect } from './common';\n/** @hidden */\n\nexport var SchedulerEditor = function (props) {\n  var onChange = props.onChange,\n      valueGetter = props.valueGetter,\n      resources = props.resources,\n      fields = props.fields,\n      timezone = props.timezone;\n  var localizationService = useLocalization();\n\n  var localizeMessage = function (message) {\n    return localizationService.toLanguageString(message, messages[message]);\n  };\n\n  var requiredValidationMessage = localizeMessage(editorValidationRequired);\n  var startValidationMessage = localizeMessage(editorValidationStart);\n  var endValidationMessage = localizeMessage(editorValidationEnd);\n  var titleMessage = localizeMessage(editorEventTitle);\n  var editorEventStartMessage = localizeMessage(editorEventStart);\n  var editorEventEndMessage = localizeMessage(editorEventEnd);\n  var editorEventDescriptionMessage = localizeMessage(editorEventDescription);\n  var editorEventAllDayMessage = localizeMessage(editorEventAllDay);\n  var editorEventTimeZoneMessage = localizeMessage(editorEventTimeZone);\n  var editorEventSeparateTimeZonesMessage = localizeMessage(editorEventSeparateTimeZones); // These are good candidates for form level validation\n\n  var startAfterEndValidator = React.useCallback(function (value, formValueGetter) {\n    return Boolean(value && formValueGetter(fields.end) && value.getTime() > formValueGetter(fields.end).getTime()) ? startValidationMessage : undefined;\n  }, [fields, startValidationMessage]);\n  var endAfterStartValidator = React.useCallback(function (value, formValueGetter) {\n    return Boolean(value && formValueGetter(fields.start) && value.getTime() < formValueGetter(fields.start).getTime()) ? endValidationMessage : undefined;\n  }, [fields, endValidationMessage]);\n  var requiredValidator = React.useCallback(function (value) {\n    return value ? undefined : requiredValidationMessage;\n  }, [requiredValidationMessage]);\n  var validators = {\n    required: requiredValidator,\n    startAfterEnd: startAfterEndValidator,\n    endAfterStart: endAfterStartValidator\n  };\n  var getStartTimezone = React.useCallback(function () {\n    return valueGetter(fields.startTimezone) || timezone || '';\n  }, [timezone, fields, valueGetter]);\n  var getEndTimezone = React.useCallback(function () {\n    return valueGetter(fields.endTimezone) || getStartTimezone() || '';\n  }, [fields, getStartTimezone, valueGetter]);\n  var start = valueGetter(fields.start) || new Date();\n  var startTimezone = getStartTimezone();\n  var endTimezone = getEndTimezone();\n\n  var _a = React.useState(Boolean(valueGetter(fields.startTimezone))),\n      startZoneChecked = _a[0],\n      setStartZoneChecked = _a[1];\n\n  var _b = React.useState(Boolean(valueGetter(fields.endTimezone))),\n      endZoneChecked = _b[0],\n      setEndZoneChecked = _b[1];\n\n  var onStartZoneCheckboxChange = React.useCallback(function (e) {\n    if (!e.target.checked) {\n      onChange(fields.startTimezone, null);\n      onChange(fields.endTimezone, null);\n      setEndZoneChecked(e.target.checked);\n    }\n\n    setStartZoneChecked(e.target.checked);\n  }, [onChange, fields]);\n  var onEndZoneCheckboxChange = React.useCallback(function (e) {\n    if (!e.target.checked) {\n      onChange(fields.endTimezone, null);\n    }\n\n    setEndZoneChecked(e.target.checked);\n  }, [onChange]);\n  return React.createElement(\"div\", {\n    className: \"k-scheduler-edit-form\"\n  }, React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }, React.createElement(\"label\", {\n    htmlFor: \"k-edit-title\"\n  }, titleMessage)), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(Field, {\n    component: Input,\n    name: fields.title,\n    id: \"k-edit-title\",\n    validator: validators.required\n  })), React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }, React.createElement(\"label\", null, editorEventStartMessage)), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(\"div\", null, valueGetter(fields.isAllDay) && React.createElement(Field, {\n    component: DatePicker,\n    name: fields.start,\n    validator: [validators.required, validators.startAfterEnd],\n    timezone: startTimezone\n  }), !valueGetter(fields.isAllDay) && React.createElement(Field, {\n    component: DateTimePicker,\n    name: fields.start,\n    validator: [validators.required, validators.startAfterEnd],\n    timezone: startTimezone\n  }), \"\\u00A0\", React.createElement(\"div\", {\n    style: {\n      verticalAlign: 'top',\n      display: 'inline-block'\n    }\n  }, React.createElement(\"input\", {\n    id: 'k-set-timezone',\n    type: 'checkbox',\n    className: 'k-checkbox',\n    onChange: onStartZoneCheckboxChange,\n    checked: startZoneChecked\n  }), React.createElement(\"label\", {\n    className: 'k-checkbox-label',\n    htmlFor: 'k-set-timezone',\n    style: labelUserSelect\n  }, editorEventTimeZoneMessage)))), startZoneChecked && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(Field, {\n    component: TimezoneEditor,\n    name: fields.startTimezone,\n    validator: validators.required\n  }))), React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }, editorEventEndMessage), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(\"div\", null, valueGetter(fields.isAllDay) && React.createElement(Field, {\n    component: DatePicker,\n    name: fields.end,\n    validator: [validators.required, validators.endAfterStart],\n    timezone: endTimezone\n  }), !valueGetter(fields.isAllDay) && React.createElement(Field, {\n    component: DateTimePicker,\n    name: fields.end,\n    validator: [validators.required, validators.endAfterStart],\n    timezone: endTimezone\n  }), \"\\u00A0\", startZoneChecked && React.createElement(\"div\", {\n    style: {\n      verticalAlign: 'top',\n      display: 'inline-block'\n    }\n  }, React.createElement(\"input\", {\n    id: 'k-use-separate',\n    type: 'checkbox',\n    className: 'k-checkbox',\n    onChange: onEndZoneCheckboxChange,\n    checked: endZoneChecked\n  }), React.createElement(\"label\", {\n    className: 'k-checkbox-label',\n    htmlFor: 'k-use-separate'\n  }, editorEventSeparateTimeZonesMessage)))), endZoneChecked && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(Field, {\n    component: TimezoneEditor,\n    name: fields.endTimezone,\n    validator: validators.required\n  }))), React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(Field, {\n    component: CheckBox,\n    name: fields.isAllDay,\n    id: 'k-is-allday-chkbox',\n    label: editorEventAllDayMessage\n  })), React.createElement(Field, {\n    component: RecurrenceEditor,\n    name: fields.recurrenceRule,\n    start: start,\n    timezone: startTimezone\n  }), React.createElement(\"div\", {\n    className: \"k-edit-label\"\n  }, React.createElement(\"label\", null, editorEventDescriptionMessage)), React.createElement(\"div\", {\n    className: \"k-edit-field\"\n  }, React.createElement(Field, {\n    component: TextArea,\n    name: fields.description,\n    id: 'k-event-description',\n    style: {\n      width: '100%'\n    }\n  })), generateResourceEditors(resources));\n};\n\nvar generateResourceEditors = function (resources) {\n  if (!resources) {\n    return null;\n  }\n\n  return resources.map(function (resource) {\n    return React.createElement(\"div\", {\n      key: resource.field\n    }, React.createElement(\"div\", {\n      className: \"k-edit-label\"\n    }, React.createElement(\"label\", null, resource.name)), React.createElement(\"div\", {\n      className: \"k-edit-field\"\n    }, resource.multiple && React.createElement(Field, {\n      name: resource.field,\n      component: MultiSelect,\n      data: resource.data,\n      textField: resource.textField,\n      dataItemKey: resource.valueField,\n      colorField: resource.colorField\n    }), !resource.multiple && React.createElement(Field, {\n      name: resource.field,\n      component: DropDownList,\n      data: resource.data,\n      textField: resource.textField,\n      dataItemKey: resource.valueField,\n      colorField: resource.colorField\n    })));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}