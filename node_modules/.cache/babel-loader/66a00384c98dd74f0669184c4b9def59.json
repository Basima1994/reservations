{"ast":null,"code":"import * as React from 'react';\nimport Draggable from '@telerik/kendo-draggable';\nimport { clone } from '@progress/kendo-react-common';\nimport { slotDive, setField } from '../utils';\nimport { SchedulerContext } from '../context';\n/** @hidden */\n\nexport var useResizable = function (elements, props, args, condition, inputs) {\n  if (inputs === void 0) {\n    inputs = [];\n  }\n\n  var fields = React.useContext(SchedulerContext).fields;\n  var oldSlotRef = React.useRef(null);\n\n  var _a = React.useState(null),\n      resizeItem = _a[0],\n      setResizeItem = _a[1];\n\n  var handlePress = function (_element, event) {\n    event.originalEvent.preventDefault();\n    event.originalEvent.stopPropagation();\n  };\n\n  var handleResizeStart = function (element, event) {\n    if (!document) {\n      return;\n    } // Depth 4 is the amount of nested elements in an Event, including titles, wrapper, container and content\n\n\n    var slot = slotDive(event.clientX, event.clientY, 4);\n\n    if (!slot) {\n      return;\n    }\n\n    if (slot === oldSlotRef.current) {\n      return;\n    }\n\n    var isAllDay = slot.getAttribute('data-slot-allday') === 'true';\n    var start = slot.getAttribute('data-slot-start');\n    var slotGroupIndex = slot.getAttribute('data-slot-group');\n    var groupIndex = element.parentElement && element.parentElement.getAttribute('data-group-index');\n\n    if (start === null) {\n      return;\n    }\n\n    if (!args.ignoreIsAllDay && isAllDay !== props.isAllDay) {\n      return;\n    }\n\n    if (Number(slotGroupIndex) !== Number(groupIndex)) {\n      return;\n    }\n\n    var newStart = new Date(Number(start));\n\n    if (newStart >= props.end) {\n      return;\n    }\n\n    var item = clone(props._dataItem);\n    setField(item, fields.start, newStart);\n    oldSlotRef.current = slot;\n    setResizeItem(item);\n  };\n\n  var handleResizeEnd = function (element, event) {\n    if (!document) {\n      return;\n    } // Depth 4 is the amount of nested elements in an Event, including titles, wrapper, container and content\n\n\n    var slot = slotDive(event.clientX, event.clientY, 4);\n\n    if (!slot) {\n      return;\n    }\n\n    var isAllDay = slot.getAttribute('data-slot-allday') === 'true';\n    var end = slot.getAttribute('data-slot-end');\n    var slotGroupIndex = slot.getAttribute('data-slot-group');\n    var groupIndex = element.parentElement && element.parentElement.getAttribute('data-group-index');\n\n    if (end === null) {\n      return;\n    }\n\n    if (!args.ignoreIsAllDay && isAllDay !== props.isAllDay) {\n      return;\n    }\n\n    if (Number(slotGroupIndex) !== Number(groupIndex)) {\n      return;\n    }\n\n    var newEnd = new Date(Number(end));\n\n    if (newEnd <= props.start) {\n      return;\n    }\n\n    var item = clone(props._dataItem);\n    setField(item, fields.end, newEnd);\n    oldSlotRef.current = slot;\n    setResizeItem(item);\n  };\n\n  var handleRelease = function (element, event) {\n    var newDrag;\n    oldSlotRef.current = null;\n    element.style.userSelect = 'auto';\n    element.style.pointerEvents = 'auto';\n    setResizeItem(function (current) {\n      newDrag = current;\n      return null;\n    });\n\n    if (!newDrag) {\n      return;\n    }\n\n    if (args.onDrop) {\n      args.onDrop(newDrag, event);\n    }\n  };\n\n  var initResizable = function () {\n    if (!condition) {\n      return;\n    }\n\n    if (args.dragHint) {\n      return;\n    }\n\n    var draggables = [];\n\n    var dragHandlers = function (start, element) {\n      if (start === void 0) {\n        start = false;\n      }\n\n      return {\n        press: handlePress.bind(undefined, element),\n        drag: start ? handleResizeStart.bind(undefined, element) : handleResizeEnd.bind(undefined, element),\n        release: handleRelease.bind(undefined, element)\n      };\n    };\n\n    if (elements.resizeEast && elements.resizeEast.current && elements.resizeEast.current.length) {\n      elements.resizeEast.current.forEach(function (element) {\n        if (element === null) {\n          return;\n        }\n\n        var draggable = new Draggable(dragHandlers(false, element));\n        draggable.bindTo(element);\n        draggables.push(draggable);\n      });\n    }\n\n    if (elements.resizeWest && elements.resizeWest.current && elements.resizeWest.current.length) {\n      elements.resizeWest.current.forEach(function (element) {\n        if (element === null) {\n          return;\n        }\n\n        var draggable = new Draggable(dragHandlers(true, element));\n        draggable.bindTo(element);\n        draggables.push(draggable);\n      });\n    }\n\n    if (elements.resizeNorth && elements.resizeNorth.current && elements.resizeNorth.current.length) {\n      elements.resizeNorth.current.forEach(function (element) {\n        if (element === null) {\n          return;\n        }\n\n        var draggable = new Draggable(dragHandlers(true, element));\n        draggable.bindTo(element);\n        draggables.push(draggable);\n      });\n    }\n\n    if (elements.resizeSouth && elements.resizeSouth.current && elements.resizeSouth.current.length) {\n      elements.resizeSouth.current.forEach(function (element) {\n        if (element === null) {\n          return;\n        }\n\n        var draggable = new Draggable(dragHandlers(false, element));\n        draggable.bindTo(element);\n        draggables.push(draggable);\n      });\n    }\n\n    return function () {\n      draggables.forEach(function (draggable) {\n        return draggable.destroy();\n      });\n    };\n  };\n\n  React.useEffect(initResizable, [props.start.getTime(), props.end.getTime()].concat(inputs));\n  return resizeItem;\n};","map":null,"metadata":{},"sourceType":"module"}