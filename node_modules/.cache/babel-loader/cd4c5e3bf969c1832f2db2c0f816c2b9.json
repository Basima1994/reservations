{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/** @hidden */\n\n\nexport var last = function (arr) {\n  return arr[arr.length - 1];\n};\n/** @hidden */\n\nexport var toFlatGroupResources = function (resources, index, depth, parents) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (depth === void 0) {\n    depth = 0;\n  }\n\n  if (parents === void 0) {\n    parents = [];\n  }\n\n  if (resources.length <= index) {\n    return [parents];\n  }\n\n  var result = [];\n  resources[index].data.map(function (item) {\n    result.push.apply(result, toFlatGroupResources(resources, index + 1, depth + 1, parents.concat([__assign({}, item, {\n      field: resources[index].field,\n      valueField: resources[index].valueField,\n      multiple: resources[index].multiple\n    })])));\n  });\n  return result;\n};\n/**\n * @hidden\n */\n\nexport function toGroupResources(group, resources) {\n  var result = [];\n\n  if (!resources || !resources.length) {\n    return result;\n  }\n\n  if (group && group.resources && group.resources.length) {\n    var groups_1 = group.resources;\n\n    var _loop_1 = function (idx) {\n      var resource = resources.find(function (r) {\n        return r.name === groups_1[idx];\n      });\n      result.push(resource);\n    };\n\n    for (var idx = 0; idx < groups_1.length; idx++) {\n      _loop_1(idx);\n    }\n  }\n\n  return result;\n}\n/**\n * @hidden\n * TODO Move to date-math\n */\n\nexport function addUTCDays(date, offset) {\n  var newDate = new Date(date.getTime());\n  newDate.setUTCDate(newDate.getUTCDate() + offset);\n  return newDate;\n}\n/**\n * @hidden\n * ResourceIterator:\n */\n\nexport var expandResources = function (resources, lastIndex) {\n  if (lastIndex === void 0) {\n    lastIndex = resources.length - 1;\n  }\n\n  var currentLastIndex = Math.max(0, lastIndex);\n  var data = [];\n\n  if (!(resources && resources.length)) {\n    resources = [{}];\n  }\n\n  var lastData = resources[currentLastIndex].data || [];\n  var length = lastData.length;\n  var count = 1;\n\n  for (var idx = 0; idx <= currentLastIndex; idx++) {\n    count *= (resources[idx].data || []).length || 1;\n  }\n\n  for (var idx = 0; idx < count; idx++) {\n    if (lastData[idx % length]) {\n      data.push(lastData[idx % length]);\n    }\n  }\n\n  return data;\n};\n/**\n * @hidden\n */\n\nexport var resourcesByIndex = function (index, taskResources, spans) {\n  // TODO: introduce cache mechanism\n  // if (!this.resourcesCache[index]) {\n  var resources = taskResources;\n  var result = [];\n  var currentIndex = index;\n\n  for (var idx = 0; idx < resources.length; idx++) {\n    var data = resources[idx].data || [];\n    var dataIdx = Math.floor(currentIndex / spans[idx]);\n    result.push(data[dataIdx]);\n    currentIndex -= dataIdx * spans[idx];\n  }\n\n  return result;\n};\n/** @hidden */\n\nexport var getRect = function (el) {\n  if (!el) {\n    return {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0\n    };\n  }\n\n  var top = el.offsetTop;\n  var left = el.offsetLeft;\n  var width = el.offsetWidth;\n  var height = el.offsetHeight;\n  return {\n    top: top,\n    left: left,\n    width: width,\n    height: height\n  };\n};\n/** @hidden */\n\nexport var getPadding = function (el, horizontal) {\n  if (horizontal === void 0) {\n    horizontal = false;\n  }\n\n  return parseInt(window.getComputedStyle(el)[horizontal ? 'paddingLeft' : 'paddingTop'] || '0', 10) * 2;\n};\n/** @hidden */\n\nexport var setRect = function (el, rect, minHeightInsteadOfHeight) {\n  if (minHeightInsteadOfHeight === void 0) {\n    minHeightInsteadOfHeight = false;\n  }\n\n  if (!el) {\n    return;\n  }\n\n  if (rect.top !== undefined) {\n    el.style.top = rect.top + \"px\";\n  }\n\n  if (rect.left !== undefined) {\n    el.style.left = rect.left + \"px\";\n  }\n\n  if (rect.width !== undefined) {\n    el.style.width = rect.width + \"px\";\n  }\n\n  if (rect.height !== undefined && !minHeightInsteadOfHeight) {\n    el.style.height = rect.height + \"px\";\n  }\n\n  if (minHeightInsteadOfHeight) {\n    el.style.minHeight = rect.height !== undefined && rect.height > 0 ? rect.height + \"px\" : null;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}