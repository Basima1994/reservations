{"ast":null,"code":"import { parseArray, parseDateTime, parseDateTimeList, parseISODate, parseWeekDayList, parseWeekDay, hasModifiers } from './utils';\n\nvar normalizeWeekDay = function (day, weekStart) {\n  return day + (day < weekStart ? 7 : 0);\n};\n\nvar daySortPredicate = function (weekStart) {\n  return function (a, b) {\n    return normalizeWeekDay(a.day, weekStart) - normalizeWeekDay(b.day, weekStart);\n  };\n};\n\nvar sortDays = function (rrule) {\n  var byWeekDay = rrule.byWeekDay,\n      weekStart = rrule.weekStart;\n\n  if (!byWeekDay) {\n    return;\n  }\n\n  byWeekDay.sort(daySortPredicate(weekStart));\n};\n/**\n * @hidden\n *\n * Internal method for parsing of iCal recurrence rule string.\n */\n\n\nexport var parseRule = function (options) {\n  if (!options) {\n    return null;\n  }\n\n  var recurrenceRule = options.recurrenceRule,\n      _a = options.weekStart,\n      weekStart = _a === void 0 ? 0 : _a;\n  var rule = {};\n  var splits, value;\n  var idx = 0,\n      length;\n  var parts;\n  var property;\n\n  if (!recurrenceRule) {\n    return null;\n  }\n\n  var lines = recurrenceRule.split('\\n');\n\n  if (!lines[1] && (recurrenceRule.indexOf('DTSTART') !== -1 || recurrenceRule.indexOf('DTEND') !== -1 || recurrenceRule.indexOf('EXDATE') !== -1)) {\n    lines = recurrenceRule.split(' ');\n  }\n\n  for (idx = 0, length = lines.length; idx < length; idx++) {\n    var line = (lines[idx] || '').trim();\n\n    if (line.indexOf('DTSTART') !== -1) {\n      rule.start = parseDateTime(line);\n    } else if (line.indexOf('DTEND') !== -1) {\n      rule.end = parseDateTime(line);\n    } else if (line.indexOf('EXDATE') !== -1) {\n      rule.exceptionDates = parseDateTimeList(line);\n    } else if (line.indexOf('RRULE') !== -1) {\n      parts = line.substring(6);\n    } else if (line.trim()) {\n      parts = line;\n    }\n  }\n\n  parts = parts.split(';');\n\n  for (idx = 0, length = parts.length; idx < length; idx++) {\n    property = parts[idx];\n    splits = property.split('=');\n    value = (splits[1] || '').trim().split(',');\n\n    switch (splits[0].trim().toUpperCase()) {\n      case 'FREQ':\n        rule.freq = value[0].toLowerCase();\n        break;\n\n      case 'UNTIL':\n        rule.until = parseISODate(value[0]);\n        break;\n\n      case 'COUNT':\n        rule.count = parseInt(value[0], 10);\n        break;\n\n      case 'INTERVAL':\n        rule.interval = parseInt(value[0], 10);\n        break;\n\n      case 'BYSECOND':\n        rule.bySecond = parseArray(value, {\n          start: 0,\n          end: 60\n        });\n        break;\n\n      case 'BYMINUTE':\n        rule.byMinute = parseArray(value, {\n          start: 0,\n          end: 59\n        });\n        break;\n\n      case 'BYHOUR':\n        rule.byHour = parseArray(value, {\n          start: 0,\n          end: 23\n        });\n        break;\n\n      case 'BYMONTHDAY':\n        rule.byMonthDay = parseArray(value, {\n          start: -31,\n          end: 31\n        });\n        break;\n\n      case 'BYYEARDAY':\n        rule.byYearDay = parseArray(value, {\n          start: -366,\n          end: 366\n        });\n        break;\n\n      case 'BYMONTH':\n        rule.byMonth = parseArray(value, {\n          start: 1,\n          end: 12\n        });\n        break;\n\n      case 'BYDAY':\n        rule.byWeekDay = parseWeekDayList(value);\n        break;\n\n      case 'BYWEEKNO':\n        rule.byWeekNumber = parseArray(value, {\n          start: -53,\n          end: 53\n        });\n        break;\n\n      case 'BYSETPOS':\n        rule.bySetPosition = parseArray(value, {\n          start: -366,\n          end: 366\n        });\n        break;\n\n      case 'WKST':\n        rule.weekStart = parseWeekDay(value[0]);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (rule.freq === undefined || rule.count !== undefined && rule.until) {\n    return null;\n  }\n\n  if (rule.weekStart === undefined) {\n    rule.weekStart = weekStart;\n  }\n\n  if (!rule.interval) {\n    rule.interval = 1;\n  }\n\n  if (rule.bySetPosition && !hasModifiers(rule)) {\n    rule.bySetPosition = [];\n  }\n\n  sortDays(rule);\n  return rule;\n};","map":null,"metadata":{},"sourceType":"module"}