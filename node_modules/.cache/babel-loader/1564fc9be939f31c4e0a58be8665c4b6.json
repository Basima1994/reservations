{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { SchedulerContext } from '../../context';\nimport { BaseView } from '../../components/BaseView';\nimport { Day, addMonths } from '@progress/kendo-date-math';\nimport { MonthViewSlot } from './MonthViewSlot';\nimport { classNames } from '@progress/kendo-react-common';\nimport { VerticalResourceIterator } from '../common/VerticalResourceIterator';\nimport { HorizontalResourceIterator } from '../common/HorizontalResourceIterator';\nimport { useMonthViewDateRange } from './hooks';\nimport { SchedulerResourceContext } from '../../context/SchedulerResourceContext';\nimport { MonthViewItem } from './MonthViewItem';\nimport { toMonthRanges, toMonthSlots, toMonthItems } from '../../services';\nimport { mapItemsToSlots, mapSlotsToItems, toSchedulerItems } from '../../utils';\nimport { monthViewTitle, messages } from '../../messages';\nvar WEEK_DAY_FORMAT = {\n  skeleton: 'EEEE'\n};\n/**\n * Represents the KendoReact [MonthView]({% slug month_view_scheduler %}) Component.\n */\n\nexport var MonthView = function (props) {\n  var _a = React.useContext(SchedulerContext),\n      intl = _a.intl,\n      group = _a.group,\n      onDateChange = _a.onDateChange,\n      onViewChange = _a.onViewChange,\n      views = _a.views,\n      date = _a.date,\n      data = _a.data,\n      fields = _a.fields,\n      timezone = _a.timezone,\n      resources = _a.resources;\n\n  var dateRange = useMonthViewDateRange(props.selectedDateFormat, props.selectedShortDateFormat);\n  var orientation = group && group.orientation === 'horizontal' ? 'horizontal' : 'vertical';\n  var ranges = React.useMemo(function () {\n    return toMonthRanges(dateRange, timezone);\n  }, [dateRange.start.getTime(), dateRange.end.getTime(), timezone]);\n  var processedData = React.useMemo(function () {\n    return toSchedulerItems({\n      data: data,\n      fields: fields,\n      timezone: timezone,\n      group: group,\n      dateRange: dateRange,\n      resources: resources\n    });\n  }, [data, fields, timezone, dateRange.start.getTime(), dateRange.end.getTime(), resources]);\n  var items = React.useMemo(function () {\n    return toMonthItems({\n      ranges: ranges,\n      timezone: timezone,\n      data: processedData,\n      rangeStart: dateRange.start,\n      rangeEnd: dateRange.end\n    });\n  }, [ranges, timezone, processedData, dateRange.start.getTime(), dateRange.end.getTime()]);\n  var slots = React.useMemo(function () {\n    return toMonthSlots(group, resources, ranges, timezone, Day.Monday, Day.Friday);\n  }, [ranges, resources, timezone]);\n  React.useMemo(function () {\n    return mapItemsToSlots(items, slots, true);\n  }, [items, slots]);\n  React.useMemo(function () {\n    return mapSlotsToItems(items, slots, true);\n  }, [items, slots]);\n\n  var handleShowMoreClick = function (slot) {\n    var newView = views.find(function (vw) {\n      return vw.props.name === 'day';\n    });\n\n    if (!newView || !onViewChange || !onDateChange) {\n      return;\n    }\n\n    onViewChange.call(undefined, newView);\n    onDateChange.call(undefined, slot.start);\n  };\n\n  var handleNavigationAction = function (action) {\n    if (!onDateChange) {\n      return;\n    }\n\n    switch (action.type) {\n      case 'next':\n        onDateChange(addMonths(date, 1));\n        return;\n\n      case 'prev':\n        onDateChange(addMonths(date, -1));\n        return;\n\n      default:\n        return;\n    }\n  };\n\n  var head = React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n    var groupIndex = _a.groupIndex;\n    return React.createElement(\"div\", {\n      className: \"k-scheduler-row\",\n      key: groupIndex\n    }, slots.filter(function (slot) {\n      return slot.groupIndex === groupIndex && slot.rangeIndex === 0;\n    }).map(function (slot, slotIndex) {\n      return React.createElement(\"div\", {\n        key: slotIndex,\n        className: \"k-scheduler-cell k-heading-cell\"\n      }, React.createElement(\"span\", {\n        \"data-dayslot-index\": slotIndex,\n        className: \"k-link k-nav-day\"\n      }, intl.formatDate(slot.start, WEEK_DAY_FORMAT)));\n    }));\n  });\n  var body = React.createElement(SchedulerResourceContext.Consumer, null, function (_a) {\n    var groupIndex = _a.groupIndex;\n    return ranges.map(function (_, rangeIndex) {\n      return React.createElement(\"div\", {\n        className: \"k-scheduler-row\",\n        key: rangeIndex\n      }, slots.filter(function (slot) {\n        return slot.groupIndex === groupIndex && slot.rangeIndex === rangeIndex;\n      }).map(function (slot, slotIndex) {\n        return React.createElement(MonthViewSlot, __assign({\n          key: slotIndex\n        }, slot, {\n          onShowMoreClick: handleShowMoreClick,\n          editable: props.editable\n        }));\n      }));\n    });\n  });\n  return React.createElement(BaseView, {\n    dateRange: dateRange,\n    slots: slots,\n    ranges: ranges,\n    onNavigationAction: handleNavigationAction\n  }, React.createElement(\"div\", {\n    style: {\n      height: 600\n    },\n    className: classNames('k-scheduler-layout k-scheduler-monthview k-scheduler-layout-flex', props.className)\n  }, React.createElement(\"div\", {\n    className: \"k-scheduler-head\"\n  }, orientation === 'horizontal' ? React.createElement(HorizontalResourceIterator, {\n    nested: true,\n    resources: resources,\n    group: group\n  }, head) : React.createElement(VerticalResourceIterator, {\n    resources: resources,\n    group: group\n  }, head)), React.createElement(\"div\", {\n    className: \"k-scheduler-body\"\n  }, orientation === 'horizontal' ? React.createElement(HorizontalResourceIterator, {\n    resources: resources,\n    group: group\n  }, body) : React.createElement(VerticalResourceIterator, {\n    nested: true,\n    resources: resources,\n    group: group\n  }, body), items.map(function (item) {\n    return React.createElement(MonthViewItem, __assign({\n      key: item.occurrenceId !== undefined ? item.id + \"-\" + item.occurrenceId : \"\" + item.id\n    }, item, {\n      editable: props.editable,\n      vertical: false\n    }));\n  }))));\n};\nvar defaultProps = {\n  name: 'month',\n  title: function (localization) {\n    return localization.toLanguageString(monthViewTitle, messages[monthViewTitle]);\n  },\n  selectedDateFormat: '{0:Y}',\n  selectedShortDateFormat: '{0:Y}'\n};\nMonthView.defaultProps = defaultProps;\nMonthView.displayName = 'KendoReactSchedulerMonthView';","map":null,"metadata":{},"sourceType":"module"}