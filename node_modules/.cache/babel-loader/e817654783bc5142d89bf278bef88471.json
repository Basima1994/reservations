{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { useItemEventHandling } from '../common/hooks';\nimport { useDraggable, useResizable } from '../../hooks';\nimport { DragHint } from '../common/DragHint';\nimport { ResizeHint } from '../common/ResizeHint';\nimport { useRefArray } from '../../hooks/useRefArray';\nimport { toTimeItems } from '../../services';\nimport { TimeFragment } from './TimeFragment';\nimport { fragmentSplit } from '../common/fragmentSplit';\n/** @hidden */\n\nexport var TimeViewItem = React.forwardRef(function (props, ref) {\n  var className = props.className,\n      vertical = props.vertical,\n      other = __rest(props, [\"className\", \"vertical\"]);\n\n  var elements = useRefArray([]);\n  var resizeEast = useRefArray([]);\n  var resizeWest = useRefArray([]);\n  var resizeNorth = useRefArray([]);\n  var resizeSouth = useRefArray([]);\n  var fragments = fragmentSplit(props, props.ranges);\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      elements: elements.current\n    };\n  });\n  var editable = props.editable === true || props.editable !== undefined && props.editable !== false && props.editable.edit === true;\n  var resizable = props.editable === true || props.editable !== undefined && props.editable !== false && props.editable.resize === true;\n  var removable = props.editable === true || props.editable !== undefined && props.editable !== false && props.editable.remove === true;\n  var draggable = props.editable === true || props.editable !== undefined && props.editable !== false && props.editable.drag === true;\n\n  var _a = useItemEventHandling(ref, props),\n      onDrop = _a.onDrop,\n      onClick = _a.onClick,\n      onDoubleClick = _a.onDoubleClick,\n      onRemoveClick = _a.onRemoveClick;\n\n  var dragItem = useDraggable(elements, other, {\n    onDrop: onDrop\n  }, draggable);\n  var resizeItem = useResizable({\n    resizeEast: resizeEast,\n    resizeWest: resizeWest,\n    resizeNorth: resizeNorth,\n    resizeSouth: resizeSouth\n  }, other, {\n    resizeEast: resizeEast,\n    resizeWest: resizeWest,\n    resizeNorth: resizeNorth,\n    resizeSouth: resizeSouth,\n    onDrop: onDrop\n  }, resizable);\n  return React.createElement(React.Fragment, null, fragments.map(function (fragment, idx) {\n    return React.createElement(TimeFragment, __assign({\n      key: idx\n    }, props, fragment, {\n      ref: function (el) {\n        return elements.current[idx] = el;\n      },\n      resizeEast: function (el) {\n        return resizeEast.current[idx] = el;\n      },\n      resizeWest: function (el) {\n        return resizeWest.current[idx] = el;\n      },\n      resizeNorth: function (el) {\n        return resizeNorth.current[idx] = el;\n      },\n      resizeSouth: function (el) {\n        return resizeSouth.current[idx] = el;\n      },\n      removable: removable,\n      resizable: resizable,\n      onClick: editable ? onClick : undefined,\n      onDoubleClick: editable ? onDoubleClick : undefined,\n      onRemoveClick: removable ? onRemoveClick : undefined\n    }));\n  }), dragItem && React.createElement(DragHint, {\n    item: dragItem,\n    toViewItems: toTimeItems,\n    component: TimeFragment,\n    sameRange: false,\n    vertical: props.vertical,\n    isAllDay: props.isAllDay\n  }), resizeItem && React.createElement(ResizeHint, {\n    item: resizeItem,\n    toViewItems: toTimeItems,\n    component: TimeFragment,\n    sameRange: false,\n    vertical: props.vertical,\n    isAllDay: props.isAllDay\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}